from pathlib import Path
from typing import Dict, Tuple, Optional
from it4kt.filesystem import Node
from it4kt.model import Page
from it4kt.processors import Reader


class CachingReader(Reader):
    """Abstract Reader that implements caching of read pages.

    Subclasses must override cacheable_read() method to implement actual reading.
    """
    def __init__(self):
        self._pages_cache: Dict[Path, Tuple[float, Page]] = {}

    def cacheable_read(self, path: Node) -> Page:
        raise NotImplementedError()

    def read(self, path: Node) -> Optional[Page]:
        real_path = path.content_path
        page = self._get_from_cache(real_path)
        if page is None:
            page = self.cacheable_read(path)
            self._put_to_cache(real_path, page)
        return page

    def _put_to_cache(self, path: Path, page: Page):
        mtime = path.stat().st_mtime
        self._pages_cache[path] = (mtime, page)

    def _get_from_cache(self, path: Path) -> Optional[Page]:
        if path not in self._pages_cache:
            return None
        last_mtime, page = self._pages_cache[path]
        if path.stat().st_mtime > last_mtime:
            return None  # File has changed
        return page
