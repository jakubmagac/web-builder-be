import importlib.util
from pathlib import Path

import yaml
from pkg_resources import resource_filename

from it4kt import env, i18n
from it4kt.filesystem import FileSystem
from it4kt.kpimark.extension import reset_customization_ext
from it4kt.logger import logger
from it4kt.writers import Theme

CONFIGURATION_FILE = Path('it4kt.yml')
TRANSLATIONS_FILE = Path('translations.yml')
CUSTOMIZATIONS_FILE = Path('init.py')

I18N_CONFIG_KEY = "translations"


def read_translation_configuration():
    if env.theme is None:
        logger.critical("Theme wasn't loaded before theme translations string are parsed")

    theme_tr_path = Path(resource_filename("it4kt", str(env.theme.path / TRANSLATIONS_FILE)))
    if not theme_tr_path.exists():
        logger.critical(f"File {theme_tr_path} is not present in theme directory.")

    builder_tr_path = Path(resource_filename("it4kt", str(TRANSLATIONS_FILE)))
    if not builder_tr_path.exists():
        logger.critical(f"File {builder_tr_path} is not present for it4kt-builder.")

    i18n.parser.read_course(env.config[I18N_CONFIG_KEY])
    i18n.parser.read_namespaces(
        [("theme", theme_tr_path), ("builder", builder_tr_path)]
    )


def read_configuration():
    if not CONFIGURATION_FILE.exists():
        logger.critical(f"File {CONFIGURATION_FILE} is not present in the working directory.")
    configuration = yaml.safe_load(CONFIGURATION_FILE.read_text(encoding='utf-8'))
    validate_configuration(configuration)
    env.add_settings(configuration)

    env.theme = configure_theme()

    if CUSTOMIZATIONS_FILE.exists():
        load_customizations()


def validate_configuration(configuration: dict):
    if 'pages' in configuration:
        logger.warning(
            '"pages" directive in the it4kt.yml is no longer supported. '
            'Pages are automatically found in the content directory.')

    if 'dev-server' in configuration:
        logger.warning(
            '"dev-server" directive in the it4kt.yml is deprecated. '
            'Use command "serve" with options --bind and --port instead.')


def configure_filesystem(external_paths=()):
    env.fs = FileSystem(Path(""), external_paths=external_paths)


def load_customizations():
    # reset extensions from Kpimark
    reset_customization_ext()
    name = CUSTOMIZATIONS_FILE.stem
    location = str(CUSTOMIZATIONS_FILE)
    spec = importlib.util.spec_from_file_location(name, location)
    config_module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(config_module)


def configure_theme():
    return Theme(env.config['theme']['package'], env.config['theme']['name'])
