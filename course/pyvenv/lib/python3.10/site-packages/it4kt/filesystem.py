from typing import List, Optional
from it4kt import i18n, env
from it4kt.logger import logger
from pathlib import Path
import shutil


class Node:
    def __init__(self, path: Path):
        name = i18n.path.remove_language_suffix(path)
        self.path = Path(name)
        self.content_path = Path(env.content_dir / path)

    @property
    def output_path(self):
        return env.output_dir / self.path

    def is_file(self) -> bool:
        return True

    def is_dir(self) -> bool:
        return not self.is_file()

    def children(self) -> List['Node']:
        return []

    def find(self, path: Path) -> Optional['Node']:
        return self if self.path == path else None

    def __str__(self):
        return str(self.path)


class ExternalPath(Node):
    def __init__(self, name: str, content_path: Optional[Path] = None):
        self.path = Path(name)
        self.content_path = content_path  # type: ignore

    def is_file(self) -> bool:
        return False


class DirNode(Node):
    def __init__(self, path: Path):
        self.path = path
        self.content_path = Path(env.content_dir / path)
        self.content: List[Node] = []

    def is_file(self) -> bool:
        return False

    def append_content(self, child: Node):
        self.content.append(child)

    def children(self) -> List[Node]:
        return self.content

    def find(self, path: Path) -> Optional[Node]:
        if self.path == path:
            return self
        for node in self.content:
            match = node.find(path)
            if match:
                return match

        return None


class FileSystem:
    def __init__(self, entry_path: Path, external_paths: Optional[List[str]] = None):
        self.root_node = self.virtualize(DirNode(entry_path))
        self.external_paths = []
        if external_paths is not None:
            for name in external_paths:
                external_path = ExternalPath(name)
                self.external_paths.append(external_path)
                self.root_node.append_content(external_path)

    @classmethod
    def copy(cls, path: Node) -> None:
        """ Copy whole CourseDir or specified CoursePath from its
            'content_path' to its 'output_path'
        """
        if not path.content_path or not path.content_path.exists():
            logger.warning(
                f"Following path cannot be copied because it does not exist '{path.content_path}'")
            return
        path.output_path.parent.mkdir(parents=True, exist_ok=True)
        if path.is_dir():
            path.output_path.mkdir(exist_ok=True)
            for inner_path in path.children():
                cls.copy(inner_path)
        else:
            shutil.copyfile(path.content_path, path.output_path)

    def find(self, path: Path) -> Optional[Node]:
        """ Find custom virtualized file system node by 'path' name """
        external_node = self.find_external(path)

        node = self.find_node(path)
        if external_node and node:
            logger.warning(
                f"FileSystem has found '{path}' file in both, "
                "course content and external paths! Content path will "
                "be returned. If you would like to get external path call find "
                "method with external argument set to True.")
        return node if node else external_node

    def find_node(self, path: Path) -> Optional[Node]:
        return self.root_node.find(path)

    def find_external(self, path: Path) -> Optional[ExternalPath]:
        for external in self.external_paths:
            if external.path == path:
                return external

        return None

    def virtualize(self, course_dir: DirNode):
        """ virtualize Course FileSystem from 'course_dir' entry path """
        tr_paths = i18n.path.localize_dir(course_dir.content_path)
        for path in tr_paths:
            relative_path = path.relative_to(env.content_dir)
            if path.is_dir():
                sub_course_dir = DirNode(relative_path)
                course_dir.append_content(sub_course_dir)
                self.virtualize(sub_course_dir)
                continue

            course_file = Node(relative_path)
            course_dir.append_content(course_file)

        return course_dir
