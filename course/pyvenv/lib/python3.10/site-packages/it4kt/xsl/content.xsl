<?xml version="1.0" encoding="UTF-8"?>

<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"
                xmlns:p="http://kpi.fei.tuke.sk/practices"
                xmlns:h="http://www.w3.org/1999/xhtml">

    <xsl:import href="localization.xsl"/>

    <xsl:template match="p:comment">
        <div class="admonition admonition--note">
            <h4 class="admonition__header">
                <xsl:value-of select="$lang.note"/>
            </h4>
            <div class="admonition__content">
                <xsl:apply-templates/>
            </div>
        </div>
    </xsl:template>

    <!--dodany element warning, ktory reprezentuje upozornenie na nejaky problem alebo na nieco, co studenti nemaju/musia urobit-->
    <xsl:template match="p:warning">
        <div class="admonition admonition--warning">
            <h4 class="admonition__header">
                <xsl:value-of select="$lang.warning"/>
            </h4>
            <div class="admonition__content">
                <xsl:apply-templates/>
            </div>
        </div>
    </xsl:template>

    <!--dodany element troubleshooting pre komentare, ktore hovoria o rieseni problemov alebo ladeni-->
    <xsl:template match="p:troubleshooting">
        <div class="admonition admonition--troubleshooting">
            <h4 class="admonition__header">
                <xsl:value-of select="$lang.note"/>
            </h4>
            <div class="admonition__content">
                <xsl:apply-templates/>
            </div>
        </div>
    </xsl:template>

    <xsl:template match="p:link">
        <xsl:choose>
            <!--ak to je odkaz na resource ktory ma id, potom to nalinkuj-->
            <xsl:when test="@resourceId">
                <xsl:variable name="resourceId" select="@resourceId"/>
                <xsl:variable name="numLinks" select="count(//p:resource[@id=$resourceId]/p:link)"/>
                <xsl:variable name="linkHref" select="//p:resource[@id=$resourceId]/p:link[position()=1]/@href"/>
                <xsl:variable name="linkText" select="//p:resource[@id=$resourceId]/p:link[position()=1]/text()"/>
                <a><xsl:attribute name="href">
                    <xsl:choose>
                        <xsl:when test="not($numLinks=1)">#resources</xsl:when>
                        <xsl:when test="$linkHref"><xsl:value-of select="$linkHref"/></xsl:when>
                        <xsl:otherwise><xsl:value-of select="$linkText"/></xsl:otherwise>
                    </xsl:choose>
                </xsl:attribute>
                <xsl:if test="$numLinks=1">
                    <xsl:attribute name="target">_blank</xsl:attribute>
                </xsl:if>[<xsl:value-of select="count(/p:module/p:resource[@id=$resourceId]/preceding-sibling::p:resource)+1"/>]</a>
            </xsl:when>
            <!--inak klasicky html link, bez resourceId-->
            <xsl:otherwise>
                <a>
                    <xsl:attribute name="href">
                        <xsl:choose>
                            <xsl:when test="@href"><xsl:value-of select="@href"/></xsl:when><xsl:otherwise><xsl:value-of select="." /></xsl:otherwise>
                        </xsl:choose><xsl:if test="@section">#<xsl:value-of select="@section"/></xsl:if>
                    </xsl:attribute>
                    <!--<xsl:if test="not(str:matches(@href,'(\d\d.html)|(info.html)|(.*\.zip)|(.*\.rar)|(.*\.jar)'))">-->
                        <!--<xsl:attribute name="target">_blank</xsl:attribute>-->
                    <!--</xsl:if>-->
                    <xsl:apply-templates/>
                </a>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <xsl:template match="p:figure">
        <figure class="figure">
            <xsl:apply-templates/>
        </figure>
    </xsl:template>

    <xsl:template match="p:caption">
        <figcaption>
          <span class="figure__number">
            <xsl:choose>
                <xsl:when test="count(parent::p:figure) > 0">
                    <xsl:value-of select="$lang.caption-prefix-fig"/>
                    <xsl:value-of select="count(../preceding::p:image) + 1"/><xsl:text>: </xsl:text>
                </xsl:when>
                <xsl:when test="count(parent::p:table) > 0">
                    <xsl:value-of select="$lang.caption-prefix-tab"/><xsl:text>: </xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:apply-templates/>
                </xsl:otherwise>
            </xsl:choose>
          </span>
          <span class="figure__caption">
            <xsl:apply-templates/>
          </span>
        </figcaption>
    </xsl:template>

    <xsl:template match="p:math">
        <xsl:choose>
            <xsl:when test="@type='AsciiMath'"> <!-- AsciiMath / inline ... don't have block (yet)-->
                <xsl:text>`</xsl:text>
                <xsl:value-of select="." />
                <xsl:text>`</xsl:text>
            </xsl:when>
            <xsl:when test="@type='MathML' and @display='block'"> <!-- MathML / block -->
                <math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
                    <xsl:apply-templates  select="child::*" mode="Math-copy-no-namespaces"/>
                    <!--                    <xsl:copy-of select="child::*" copy-namespaces="no"/>-->
                </math>
            </xsl:when>
            <xsl:when test="@type='MathML'"> <!-- MathML / inline -->
                <math xmlns="http://www.w3.org/1998/Math/MathML">
                    <xsl:apply-templates  select="child::*" mode="Math-copy-no-namespaces"/>
                    <!--<xsl:copy-of select="child::*" copy-namespaces="no"/>-->
                </math>
            </xsl:when>
            <xsl:when test="@display='block'"> <!-- Tex / block -->
                <xsl:text>\[</xsl:text>
                <xsl:value-of select="." />
                <xsl:text>\]</xsl:text>
            </xsl:when>
            <xsl:otherwise> <!-- Tex / inline -->
                <xsl:text>\(</xsl:text>
                <xsl:value-of select="." />
                <xsl:text>\)</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <xsl:template match="*" mode="Math-copy-no-namespaces">
        <xsl:element name="{local-name()}" namespace="http://www.w3.org/1998/Math/MathML">
            <xsl:copy-of select="@*"/>
            <xsl:apply-templates select="@*|node()" mode="Math-copy-no-namespaces"/>
        </xsl:element>
    </xsl:template>

    <xsl:template match="p:code">
        <xsl:choose>
            <xsl:when test="@display='block'">
                <xsl:choose>
                    <xsl:when test="@lang">
                        <pre class="code">
                            <code class="language-{@lang}">
                                <xsl:apply-templates/>
                            </code>
                        </pre>
                    </xsl:when>
                    <xsl:otherwise>
                        <pre class="code">
                            <code>
                                <xsl:apply-templates/>
                            </code>
                        </pre>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <code>
                    <xsl:apply-templates/>
                </code>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <xsl:template match="p:image">
        <img>
            <xsl:choose>
                <xsl:when test="@scale">
                    <xsl:attribute name="style">width: <xsl:value-of select="@scale"/>; height: <xsl:value-of select="@scale"/></xsl:attribute>
                </xsl:when>
            </xsl:choose>
            <xsl:attribute name="src"><xsl:value-of select="." /></xsl:attribute>
            <xsl:attribute name="alt">
                <xsl:value-of select="following-sibling::p:caption"/>
            </xsl:attribute>
        </img>
    </xsl:template>

    <xsl:template match="p:table">
        <div class="table">
            <table class="table__table">
                <xsl:apply-templates select="p:header" />
                <tbody>
                    <xsl:apply-templates select="p:row" />
                </tbody>
            </table>
        </div>
    </xsl:template>

    <xsl:template match="p:row">
        <tr>
            <xsl:apply-templates/>
        </tr>
    </xsl:template>

    <xsl:template match="p:col">
        <xsl:choose>
            <xsl:when test="count(parent::p:header) > 0">
                <th>
                    <xsl:apply-templates/>
                </th>
            </xsl:when>
            <xsl:when test="count(parent::p:row) > 0">
                <td>
                    <xsl:apply-templates/>
                </td>
            </xsl:when>
            <xsl:otherwise>
                <xsl:apply-templates/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <xsl:template match="p:header" name="header">
        <thead>
            <tr>
                <xsl:apply-templates/>
            </tr>
        </thead>
    </xsl:template>

    <!-- ======================== Lecturer element ======================== -->
    <xsl:template match="p:lecturer">
        <xsl:if test="$lecturerMode">
            <xsl:choose>
                <xsl:when test="@style='block'">
                    <div class="lecturer">
                        <h4 class="lecturer__header"><xsl:value-of select="$lang.lecturer"/></h4>
                        <div class="lecturer__content">
                            <xsl:apply-templates/>
                        </div>
                    </div>
                </xsl:when>
                <xsl:otherwise>
                    <span class="lecturer-inline">
                        <xsl:apply-templates/>
                    </span>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:if>
    </xsl:template>

    <!-- ===================== copy all html elements ====================== -->
    <xsl:template match="h:*">
        <xsl:element name="{local-name(.)}">
            <xsl:apply-templates select="@*|node()"/>
         </xsl:element>
    </xsl:template>

    <xsl:template match="@*|text()">
        <xsl:copy/>
    </xsl:template>

    <!-- ============ support selected html elements directly ============= -->
    <xsl:template match="p:p | p:ul | p:ol | p:li | p:a | p:em | p:strong">
        <xsl:element name="{local-name(.)}">
            <xsl:apply-templates select="@*|node()"/>
         </xsl:element>
    </xsl:template>

</xsl:stylesheet>
