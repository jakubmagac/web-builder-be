import re
from typing import List

from mistletoe.block_token import BlockToken, tokenize


class AdmonitionBlock(BlockToken):
    ALERT_TYPES: List[str] = []

    pattern = re.compile(
        r"(^|\n)[ ]{0,3}>[ ]?(?P<keyword>[\w\-_]+( [\w\-_]+)?): *(?:\n|$)", re.S
    )

    def __init__(self, match):
        header, lines = match
        for key in header:
            # set class variables by regex groups keys
            setattr(self, key, header.get(key, None))

        # span-level tokenizing happens here.
        super().__init__(lines, tokenize)

    @classmethod
    def start(cls, line):
        m = cls.pattern.search(line)
        if not m:
            return False

        found_alert_type = m.group("keyword")  # matched alert Keyword
        if found_alert_type.lower() in cls.ALERT_TYPES:
            return True

        return False

    @classmethod
    def read(cls, lines):
        header_line = cls.pattern.search(next(lines))

        line_buffer = []
        next_line = lines.peek()
        next_line_stripped = cls.dequote_one_level(next_line)
        while next_line is not None and next_line != "" and next_line != "\n":
            # no other tokens, we're good
            if next_line_stripped:
                line_buffer.append(next_line_stripped)
            # move iterator to next line
            next(lines)
            # fetch next line
            next_line = lines.peek()
            # dequote next line
            next_line_stripped = cls.dequote_one_level(next_line)

        return header_line.groupdict(), line_buffer

    @staticmethod
    def dequote_one_level(string):
        if not string:
            return None
        elif string.startswith("> "):
            string = string[2:]
        elif string.startswith(">\t"):
            string = string[2:]
        elif string.startswith(">"):
            string = string[1:]

        return string


class TitledAdmonitionBlock(AdmonitionBlock):
    pattern = re.compile(
        r"(^|\n)[ ]{0,3}>[ ]?(?P<keyword>[\w\-_]+( [\w\-_]+)?): *(?P<title>[\w\-:_ ]+)?(?:\n|$)",
        re.S
    )


class HideableAdmonitionBlock(AdmonitionBlock):
    pattern = re.compile(
        r"(^|\n)[ ]{0,3}>[ ]?(?P<keyword>[\w\-_]+( [\w\-_]+)?)(?P<is_hidden>\*)?: *(?:\n|$)", re.S
    )


class TaskBlock(AdmonitionBlock):
    ALERT_TYPES = ["task", "úloha"]


class NoteBlock(AdmonitionBlock):
    ALERT_TYPES = ["comment", "poznámka"]


class WarningBlock(AdmonitionBlock):
    ALERT_TYPES = ["warning", "upozornenie"]


class LecturerBlock(AdmonitionBlock):
    ALERT_TYPES = ["lecturer", "vyučujúci"]


class ExampleBlock(TitledAdmonitionBlock):
    ALERT_TYPES = ["example", "príklad"]


class WrongExampleBlock(TitledAdmonitionBlock):
    ALERT_TYPES = ["wrong example", "nesprávny príklad"]


class SolutionBlock(HideableAdmonitionBlock):
    ALERT_TYPES = ["solution", "riešenie"]


class ResultBlock(SolutionBlock):
    ALERT_TYPES = ["result", "výsledok"]
