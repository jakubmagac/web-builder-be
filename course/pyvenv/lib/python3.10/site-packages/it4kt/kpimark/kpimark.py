from mistletoe.block_token import Document as OriginalDocument
from mistletoe.block_token import HTMLBlock
from mistletoe.latex_token import Math

from it4kt.kpimark.extension import REGISTERED_RENDERERS, REGISTERED_VALIDATORS
from it4kt.kpimark.html_renderer import KpimarkHTMLRenderer
from it4kt.kpimark.tokens.admonitions import (
    ResultBlock, TaskBlock, WarningBlock, NoteBlock, LecturerBlock,
    ExampleBlock, WrongExampleBlock, SolutionBlock
)
from it4kt.kpimark.tokens.media import YoutubeToken, VideoToken, AudioToken
from it4kt.kpimark.tokens.meta import MetaBlock
from it4kt.kpimark.validation.validator import Validator
from it4kt.kpimark.tokens.sections import (
    SectionBlock, InstructionsBlock, IntroductionBlock, ObjectivesBlock,
    ObjectiveItem, StepBlock, SummaryBlock, ResourcesBlock,
    AdditionalResourcesBlock, AdditionalTasksBlock
)

KPIMARK_TOKENS = [
    HTMLBlock,
    MetaBlock,
    InstructionsBlock,
    SectionBlock,
    IntroductionBlock,
    ObjectivesBlock,
    ObjectiveItem,
    StepBlock,
    SummaryBlock,
    ResourcesBlock,
    AdditionalResourcesBlock,
    AdditionalTasksBlock,
    TaskBlock,
    ExampleBlock,
    WrongExampleBlock,
    WarningBlock,
    SolutionBlock,
    ResultBlock,
    NoteBlock,
    LecturerBlock,
    Math,
    YoutubeToken,
    VideoToken,
    AudioToken,
]


class Kpimark:
    def __init__(self, template, validation):
        self.template = template
        self.validation = validation
        self.title = None
        self.subtitle = None
        self.author = None
        self.week = None
        self.publication_week = None

    @staticmethod
    def _get_renderer(base):
        """ Run though registered renderers and pick one when matched. """
        for replace, new_renderer in REGISTERED_RENDERERS:
            if replace == base:
                return new_renderer
        return base

    @staticmethod
    def _get_validator(base):
        """ Run though registered renderers and pick one when matched. """
        if len(REGISTERED_VALIDATORS) > 0:
            return REGISTERED_VALIDATORS[0]
        return base

    def render_html(self, text, filename):
        use_renderer = self._get_renderer(KpimarkHTMLRenderer)
        with use_renderer(KPIMARK_TOKENS) as renderer:
            # 1. create document from text
            document = Document(text)
            # 2. run validator first
            if self.validation:
                use_validator = self._get_validator(Validator)
                validator = use_validator(filename, self.template, self.validation,
                                          KPIMARK_TOKENS)
                validator.validate(document)
            # 3. render document to html
            html_text = renderer.render_html(document)
            # 4. parse metadata from document
            self._fill_meta(renderer)

            return html_text

    def _fill_meta(self, renderer):
        self.title = renderer.title
        self.subtitle = renderer.subtitle
        self.author = renderer.author
        self.week = renderer.week
        self.publication_week = renderer.publication_week

    @staticmethod
    def reset():
        MetaBlock.is_first_line = True
        Validator.LAST_VALIDATED_ADMONITION = None


class Document(OriginalDocument):
    """
    Document token.
    """
    def __init__(self, lines, wrap_steps=True):
        super().__init__(lines)
        if wrap_steps:
            self._wrap_steps()

    def _wrap_steps(self):
        """We are wrapping StepBlocks with InstructionsBlock"""
        self.children = InstructionsBlock.read_tokens(self.children)
