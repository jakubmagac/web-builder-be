from typing import List, Tuple, Union, Type
from it4kt.kpimark.validation.validator import Validator
from it4kt.logger import logger
from mistletoe.html_renderer import HTMLRenderer
from mistletoe.latex_renderer import LaTeXRenderer

AvailableRenderersType = Union[Type[HTMLRenderer], Type[LaTeXRenderer]]

REGISTERED_RENDERERS: List[Tuple[AvailableRenderersType, AvailableRenderersType]] = []
# we had to set validators as list becuase it is a mutable data type.
# With any immutable type used, there are scope problems...
REGISTERED_VALIDATORS: List[Type[Validator]] = []


def register_renderer(cls):
    def decorator(renderer):
        for replace, _ in REGISTERED_RENDERERS:
            if cls == replace:
                logger.critical(("You can only register one custom renderer "
                                 "for '{}'.").format(cls.__name__))

        REGISTERED_RENDERERS.append((cls, renderer))  # type: ignore
        return renderer

    return decorator


def register_validator(cls):
    if cls not in REGISTERED_VALIDATORS:
        if len(REGISTERED_VALIDATORS) > 0:
            logger.critical("You can only register one validator from course's init.py file.")

        REGISTERED_VALIDATORS.append(cls)

    return cls


def reset_customization_ext():
    REGISTERED_RENDERERS.clear()
    REGISTERED_VALIDATORS.clear()
