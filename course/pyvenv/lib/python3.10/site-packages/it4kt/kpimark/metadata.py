import re
from typing import List, Tuple, Callable, Any

from it4kt.listtools import partition_with

KEY_RE = re.compile(r"^\w[\w \t-]*:")


def read_metadata(lines: List[str]) -> Tuple[dict, List[str]]:
    """Extract and parse metadata from the beginning of a document.
    Returns the metadata dictionary and the rest of the document.
    """
    if not lines:
        return {}, lines
    lines_ = lines[1:] if lines[0] == "---\n" else lines
    if not KEY_RE.match(lines_[0]):
        return {}, lines
    header, rest = partition_with(_is_metadata_end, lines_)
    return parse_metadata(header), rest


def _is_metadata_end(line: str) -> bool:
    return line == "---\n" or line == "\n"


def parse_metadata(lines: List[str]) -> dict:
    metadata = {}
    last_key = None
    for line in lines:
        if len(line) == 0:
            continue
        if KEY_RE.match(line):
            key, _, value = line.partition(":")
            last_key = _normalize_key(key)
            metadata[last_key] = value.strip()
        else:
            if last_key is not None:
                metadata[last_key] += "\n" + line.strip()
    return metadata


def _normalize_key(key):
    return re.sub(r"\s+", "-", key.strip().lower())


class KeyDefinition:
    """Metadata key names and value convertor"""
    def __init__(self, names: List[str], convertor: Callable[[str], Any] = str):
        self.key = names[0]
        self.names = names
        self.convertor = convertor

    def matches(self, key):
        return any(map(lambda name: name == key, self.names))

    def convert_value(self, value):
        return self.convertor(value)


class MetadataNormalizer:
    def __init__(self, key_definitions: List[KeyDefinition]):
        self.keys = key_definitions

    def normalize(self, metadata: dict) -> dict:
        normalized = {}
        for key, value in metadata.items():
            for key_def in self.keys:
                if key_def.matches(key):
                    normalized[key_def.key] = key_def.convert_value(value)
                    break
            else:
                normalized[key] = value
        return normalized
