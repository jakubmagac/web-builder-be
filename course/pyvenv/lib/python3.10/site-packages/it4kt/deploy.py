import json
import os
import shutil
from tempfile import TemporaryDirectory
from typing import Optional, Dict, Any

import requests

from it4kt import env


class DeploymentError(Exception):
    pass


class Deployment:
    _deploy_config: Dict[str, Any]
    _service: str
    _course: str
    _token: str
    _path_protection: Optional[Dict[str, str]]

    def __init__(self):
        self._deploy_config = env.config['deploy']
        self._service = self._deploy_config['service'].rstrip('/')
        self._course = self._read_course_id()
        self._token = self._read_deploy_token()
        self._path_protection = self._read_path_protection()

    def run(self):
        with TemporaryDirectory('it4kt') as tmp:
            package_path = self._create_package(tmp)
            self._upload_course(package_path)

    def _read_course_id(self):
        try:
            return self._deploy_config['code']
        except KeyError:
            raise DeploymentError(
                'Missing configuration: deploy/code must be present in it4kt.yml.')

    def _read_deploy_token(self):
        token = os.getenv('DEPLOY_TOKEN')
        if token is None:
            raise DeploymentError(
                'Missing configuration: DEPLOY_TOKEN environment variable must '
                'contain your secret deployment token.')
        return token

    def _read_path_protection(self):
        try:
            lecturer_credentials = self._deploy_config['lecturer-credentials']
        except KeyError:
            return None
        if lecturer_credentials == '':
            return None
        if not isinstance(lecturer_credentials, str) or ':' not in lecturer_credentials:
            raise DeploymentError(
                'Invalid configuration: If deploy/lecturer-credentials is '
                'present in it4kt.yml, it must be in form "username:password".')
        return {'lecturer': lecturer_credentials}

    def _create_package(self, package_dir: str) -> str:
        print('Packaging course...')
        if not env.output_dir.exists():
            raise DeploymentError(
                'Output directory does not exist. Run build first.')
        return shutil.make_archive(
            os.path.join(package_dir, 'package'), 'zip', env.output_dir)

    def _upload_course(self, package_path: str) -> None:
        deploy_url = '{}/{}'.format(self._service, self._course)

        if self._path_protection is not None:
            fields = {'protected-paths': json.dumps(self._path_protection)}
        else:
            fields = {}

        print('Deploying to {} ...'.format(deploy_url))
        request = requests.post(
            deploy_url,
            headers={'Authorization': 'Token {}'.format(self._token)},
            data=fields,
            files={'package': open(package_path, 'rb')}
        )

        if request.status_code == requests.codes.ok:
            print('Deployment done')
        else:
            raise DeploymentError(request.text)
