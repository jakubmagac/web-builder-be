import shutil
from contextlib import contextmanager
from pathlib import Path
from timeit import default_timer as timer
from typing import Optional, Sequence, Tuple, List, Dict

import it4kt
import it4kt.configuration
from it4kt import env, i18n
from it4kt.logger import logger
from it4kt.model import Course, Folder, Link, COURSE_OVERVIEW, OBJECTIVES_OVERVIEW
from it4kt.processors import Processor, Reader, Writer, Patterns
from it4kt.readers import KpimarkReader, XMLReader, XMLScenarioReader, ShowerSlidesReader
from it4kt.writers import CopyWriter, LatexTemplateWriter, OverviewWriter, \
    StylesWriter, Theme, TemplateWriter, LecturerCopyWriter

PAGES_KEY = 'pages'
FOLDERS_KEY = 'folders'
LINKS_KEY = 'links'

DEFAULT_TYPE = 'page'

Processors = Tuple[Processor, List[Processor]]
ReaderAndWriter = Tuple[Optional[Reader], Optional[Writer]]


class Builder:
    ROOT_PATTERNS: Patterns = [
        ('styles', None, StylesWriter()),
        (COURSE_OVERVIEW, None, OverviewWriter('overview.html')),
        (OBJECTIVES_OVERVIEW, None, OverviewWriter('objectives_overview.html')),
    ]

    TYPE_PATTERNS: Dict[str, Patterns] = {
        'page': [
            ('*.xml', XMLReader('page.xsl'), TemplateWriter('page.html')),
            ('*.md', KpimarkReader('page', validation=None), TemplateWriter('page.html')),
            ('lecturer', None, LecturerCopyWriter()),
            ('*', None, CopyWriter()),
        ],
        'scenario': [
            ('*.xml', XMLScenarioReader(), TemplateWriter('page.html')),
            ('*.md', KpimarkReader('scenario'), TemplateWriter('page.html')),
            ('lecturer', None, LecturerCopyWriter()),
            ('*', None, CopyWriter()),
        ],
        'shower_slides': [
            ('*.md', ShowerSlidesReader(), TemplateWriter('shower_slides.html')),
            ('lecturer', None, LecturerCopyWriter()),
            ('*', None, CopyWriter()),
        ],
    }

    def __init__(self):
        it4kt.configuration.read_configuration()
        it4kt.configuration.read_translation_configuration()
        self.root_processor = self._configure_root_processor()
        self.folder_processors = self._configure_folder_processors()
        self.external_paths = self._get_external_paths()

    def _configure_root_processor(self) -> Processor:
        page_patterns = self.ROOT_PATTERNS + self.TYPE_PATTERNS[DEFAULT_TYPE]
        folder_paths = [Path(folder['path']) for folder in env.config[FOLDERS_KEY]]
        return Processor(Path(''), page_patterns, folder_paths)

    def _configure_folder_processors(self) -> List[Processor]:
        folders = []
        for folder in env.config[FOLDERS_KEY]:
            patterns = self.TYPE_PATTERNS[folder.get('type', DEFAULT_TYPE)]
            folders.append(Processor(Path(folder['path']), patterns))
        return folders

    def _get_external_paths(self):
        return [path for path, reader, _ in self.ROOT_PATTERNS if reader is None]

    def build(self) -> None:
        with build_stopwatch():
            if env.output_dir.exists():
                shutil.rmtree(env.output_dir)

            for language in i18n.languages:
                i18n.change_language(language)
                it4kt.configuration.configure_filesystem(self.external_paths)
                course = self.read_course()

                self.write_course(course)
                with lecturer_mode():
                    self.write_course(course)
            # after all, reset language so server knows correct path
            i18n.change_language(i18n.default_lang)

            i18n.print_warnings()

    def read_course(self) -> Course:
        course = self._create_course()
        course.put_pages(self.root_processor.read())
        for folder, processor in zip(course.folders, self.folder_processors):
            folder.put_pages(processor.read())
        return course

    def _create_course(self) -> Course:
        course_config = env.config['course']
        acronym = course_config.get('acronym', None)
        if acronym is not None:
            acronym = i18n.t_from_config(acronym)
        course = Course(i18n.t_from_config(course_config['title']), acronym)

        folders = [self._create_folder(f) for f in env.config[FOLDERS_KEY]]
        course.put_folders(folders)
        course.put_links(self._create_links())
        return course

    def _create_folder(self, folder_config: dict) -> Folder:
        path = Path(folder_config['path'])
        title = None
        if 'title' in folder_config:
            title = i18n.t_from_config(folder_config['title'])
        return Folder(path, title)

    def _create_links(self) -> List[Link]:
        links = []
        for link in env.config.get(LINKS_KEY, []):
            link_title = i18n.t_from_config(link['title'])
            link_url = i18n.t_from_config(link['url'])
            links.append(Link(link_title, link_url))
        return links

    def write_course(self, course: Course) -> None:
        self.root_processor.write(course)
        for processor in self.folder_processors:
            processor.write(course)


class LatexBuilder(Builder):
    ROOT_PATTERNS = [
        ('styles', None, StylesWriter()),
    ]

    EXTERNAL_PATHS = ["styles"]

    TYPE_PATTERNS: Dict[str, Patterns] = {
        'page': [
            ('*.md', KpimarkReader('page'), LatexTemplateWriter('page.tex')),
            ('*.xml', XMLReader('page.xsl'), LatexTemplateWriter('page.tex')),
            ('*', None, CopyWriter()),
        ],
        'scenario': [
            ('*.md', KpimarkReader('scenario'), LatexTemplateWriter('page.tex')),
            ('*.xml', XMLScenarioReader(), LatexTemplateWriter('page.tex')),
            ('*', None, CopyWriter()),
        ],
        'shower_slides': [],
    }

    def __init__(self, langs: Sequence[str], custom_style: Optional[Path]):
        super(LatexBuilder, self).__init__()
        if not langs:
            logger.warning("No language was set so tool will use all languages of the course.")
            self.languages = i18n.languages
        else:
            self.languages = langs
        self.custom_style = custom_style

    def build(self):
        with build_stopwatch():
            env.output_dir = Path("latex-output")
            if env.output_dir.exists():
                shutil.rmtree(env.output_dir)

            it4kt.configuration.read_configuration()
            it4kt.env.theme = Theme(it4kt.env.config['theme']['package'], "latex")
            it4kt.configuration.read_translation_configuration()

            if len(self.languages) == 1:
                i18n.default_lang = self.languages[0]
                i18n.fallback_lang = self.languages[0]

            for lang in self.languages:
                i18n.change_language(lang)

                it4kt.configuration.configure_filesystem(self.external_paths)

                course = self.read_course()

                self.write_course(course)
                path = Path("article.tex")
                index_writer = LatexTemplateWriter(path.name)
                index_writer.write_main(course, path, self.custom_style)
                with lecturer_mode():
                    self.write_course(course)
                    index_writer.write_main(course, path, self.custom_style)

            # i18n.change_language(i18n.default_lang)
            i18n.print_warnings()


@contextmanager
def lecturer_mode():
    it4kt.env.lecturer_mode = True
    yield
    it4kt.env.lecturer_mode = False


@contextmanager
def build_stopwatch():
    """Build the course and print elapsed time"""
    start = timer()
    yield
    build_time_ms = (timer() - start) * 1000
    logger.info("Course built in %d ms" % (build_time_ms,))
