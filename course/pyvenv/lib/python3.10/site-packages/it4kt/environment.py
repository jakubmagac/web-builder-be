from collections.abc import Mapping, MutableMapping
from pathlib import Path
from typing import Optional, TYPE_CHECKING

from it4kt.i18n import I18n
from it4kt.logger import logger

if TYPE_CHECKING:
    from it4kt.filesystem import FileSystem

PUBLISHED_WEEKS_KEY = "published-weeks"

DEFAULT_CONTENT_PATH = Path("content")
DEFAULT_OUTPUT_PATH = Path("output")

DEFAULT_CONFIGURATION = {
    "course": {
        "title": "Course without a name"
    },
    "translations": {
        "languages": ["sk"],
        "fallbackLanguage": "sk",
    },
    "theme": {
        "package": "it4kt",
        "name": "light"
    },
    "dev-server": {
        "host": "127.0.0.1",
        "port": "8080"
    },
    "deploy": {
        "service": "https://kurzy.kpi.fei.tuke.sk/uploads/",
        "lecturer-credentials": "",
    },
}


class Environment:
    def __init__(self, i18n=None):
        self.config = deep_copy(DEFAULT_CONFIGURATION)
        self.lecturer_mode = False
        self.development_mode = True
        self.content_dir = DEFAULT_CONTENT_PATH
        self._output_dir = DEFAULT_OUTPUT_PATH
        self.theme = None
        self._fs: Optional[FileSystem] = None
        self.i18n = i18n or I18n()

    @property
    def fs(self):
        if self._fs is None:
            logger.critical("FileSystem was not yet created! Please initialize FileSystem first.")
        return self._fs

    @fs.setter
    def fs(self, fs: 'FileSystem'):
        self._fs = fs

    @property
    def published_weeks(self) -> Optional[int]:
        if PUBLISHED_WEEKS_KEY in self.config:
            return self.config[PUBLISHED_WEEKS_KEY]
        else:
            return None

    @property
    def output_dir(self) -> Path:
        path = self._output_dir
        if self.lecturer_mode:
            path /= 'lecturer'
        if self.i18n.language != self.i18n.default_lang:
            path /= self.i18n.language
        return path

    @output_dir.setter
    def output_dir(self, path: Path) -> None:
        self._output_dir = path

    def add_settings(self, configuration: dict):
        update_recursively(self.config, configuration)

    def reset(self):
        """Reset the environment to default configuration."""
        self.__init__(self.i18n)  # Keep i18n, so it4kt.i18n is correct
        self.i18n.change_language(self.i18n.default_lang)


def update_recursively(original: MutableMapping, other: Mapping):
    for key, value in other.items():
        if (key in original
                and isinstance(original[key], MutableMapping)
                and isinstance(value, Mapping)):
            update_recursively(original[key], value)
        else:
            original[key] = value


def deep_copy(original: Mapping) -> dict:
    copy = dict()
    for key, value in original.items():
        if isinstance(value, Mapping):
            copy[key] = deep_copy(value)
        else:
            copy[key] = value
    return copy
