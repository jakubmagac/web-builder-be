from pathlib import Path
from typing import Optional, Tuple

import click as click

import it4kt.configuration
import it4kt.convert
from it4kt.auto import Server
from it4kt.build import Builder, LatexBuilder
from it4kt.deploy import Deployment
from it4kt.logger import logger


@click.group()
def cli():
    pass


@cli.command()
@click.option('--development', is_flag=True, default=False)
def build(development):
    """Build the course."""
    print(f'Building with IT4KT Builder v{it4kt.__version__}')
    it4kt.env.development_mode = development
    builder = Builder()
    builder.build()


@cli.command()
@click.option('--open-browser', is_flag=True,
              help="open the course in default web browser")
@click.option('--bind', default="127.0.0.1",
              help="IP address to which the server will bind (default 127.0.0.1)")
@click.option('--port', type=int, default=8080,
              help="port on which the server will listen (default 8080)")
def serve(open_browser, bind, port):
    """Start development server that rebuilds the course on changes."""
    print(f'Starting IT4KT Builder v{it4kt.__version__}')
    it4kt.env.development_mode = True
    Server(bind, port).start(open_browser)


@cli.command()
@click.option('--open-browser/--no-open-browser', default=True)
def auto(open_browser):
    """Auto-rebuild server (DEPRECATED, use "serve" instead)."""
    logger.warning('Command "auto" is deprecated, use "serve" instead.')
    it4kt.env.development_mode = True
    Server().start(open_browser)


@cli.command()
def deploy():
    """Deploy course materials to the IT4KT server."""
    try:
        it4kt.configuration.read_configuration()
        Deployment().run()
    except Exception as error:
        logger.exception(error)
        exit(1)


@cli.command()
@click.argument('filenames', type=click.Path(exists=True), nargs=-1)
def convert(filenames):
    for filename in filenames:
        input_path = Path(filename)
        if input_path.suffix == '.xml':
            output_path = input_path.with_suffix('.md')
            logger.info(f'Converting {input_path} to {output_path}')
            convert_file(input_path, output_path)
        else:
            logger.warning(
                f'Skipping {input_path} (unsupported extension {input_path.suffix})')


@cli.command()
@click.option('-l', '--language', 'languages', multiple=True)
@click.option('-s', '--style', 'custom_style', default=None, type=click.Path())
def latex(languages: Tuple[str], custom_style: Optional[str]):
    custom_style_path = None
    if custom_style:
        custom_style_path = Path(custom_style)
        if not custom_style_path.exists():
            logger.critical("Custom style '{}' doesn't exist.".format(custom_style))

    logger.info(
        "it4kt-builder will now try to convert your input into LaTeX.")

    logger.warning(
        "A few notes before the conversion starts about current implementation of LaTeX parser:"
        "\n  - It doesn't support .svg images"
        "\n  - It doesn't support media token conversion (YouTube, video or audio tokens)"
        "\n  - XML to LaTeX conversion is not implemented - xml files are gonna be skipped."
        "\n  - HTML elements are not supported. All HTML content is going to be commented."
        "\n  - To manipulate included .tex files you need to edit 'article.tex' "
        "in generated folder."
        "\n\n")

    logger.info("Tool will try to perform whole course conversion")
    builder = LatexBuilder(languages, custom_style_path)
    builder.build()
    logger.info("Conversion has ended.")


def convert_file(input_path: Path, output_path: Path):
    with input_path.open('rb') as input_file:
        text = it4kt.convert.xml_to_markdown(input_file)
        output_path.write_text(text, encoding='utf-8')


if __name__ == '__main__':
    cli()
