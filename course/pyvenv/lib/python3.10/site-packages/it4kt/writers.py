"""Writers generate parts of the course web site.
They must have write method with two parameters:
- course object
- path of the source file or directory
"""
import os
import shutil
from datetime import datetime
from functools import partial
from pathlib import Path
from typing import List, Optional
from urllib.parse import urlparse

from jinja2 import Environment, FileSystemLoader, pass_context
from pkg_resources import resource_filename

from it4kt import i18n, model, env, url
from it4kt.filesystem import Node, ExternalPath
from it4kt.latex import HtmlToLatex
from it4kt.logger import logger
from it4kt.model import Page
from it4kt.processors import Writer


class CopyWriter(Writer):
    """Just copy file or directory to the output."""

    def write(self, course: model.Course, path: Node) -> None:
        if path.output_path.exists():
            shutil.rmtree(path.output_path)
        env.fs.copy(path)


class LecturerCopyWriter(CopyWriter):
    """Copy file or directory only in the lecturer mode."""

    def write(self, course: model.Course, path: Node) -> None:
        if env.lecturer_mode:
            super().write(course, path)


class StylesWriter(Writer):
    """Copy style files of selected theme to the output."""

    def write(self, course: model.Course, external_path: Node) -> None:
        output_path = external_path.output_path
        if output_path.exists():
            shutil.rmtree(str(output_path))
        for path in env.theme.get_styles_paths():
            copy_files(path, output_path)


class TemplateWriter(Writer):
    """Generate HTML file using a template."""

    def __init__(self, name) -> None:
        self.name = name
        self._templates = None

    def write(self, course: model.Course, path: Node) -> None:
        try:
            page = course.get_by_path(path.path)
            if not isinstance(page, Page):
                logger.critical("TemplateWriter did not get '{}' instead of '{}'!".format(
                    page.__class__.__name__, Page.__name__))
        except KeyError:
            return

        output_file = path.output_path.with_suffix(".html")
        create_parents(output_file)

        element_tree = page.element_tree
        if element_tree is None:
            logger.critical(
                "Template writer cannot parse element tree from page!")
        element_tree.rewrite_links(partial(url.relativize, page.path))
        with output_file.open("w", encoding="utf-8") as f:
            template = self.templates.get_template(self.name)
            f.write(template.render(page=page, course=course, env=env, i18n=i18n))

    @property
    def templates(self):
        if self._templates is None:
            self._templates = self.initialize_templates()
        return self._templates

    def initialize_templates(self):
        loader = FileSystemLoader(env.theme.get_templates_paths())
        environment = Environment(loader=loader)
        environment.globals['now'] = datetime.utcnow()
        environment.filters['relative'] = relative
        return environment


class LatexTemplateWriter(TemplateWriter):
    def write(self, course: model.Course, path: Node) -> None:
        try:
            page = course.get_by_path(path.path)
        except KeyError:
            return

        output_file = path.output_path.with_suffix(".tex")
        create_parents(output_file)
        with output_file.open("w", encoding="utf-8") as f:
            template = self.templates.get_template(self.name)
            f.write(template.render(page=page, content=HtmlToLatex(page.element_tree).convert()))

    def write_main(self, course: model.Course, path: Path, custom_style: Optional[Path]) -> None:
        index_path = Node(path)
        output_file = index_path.output_path.with_suffix(".tex")
        create_parents(output_file)

        if custom_style:
            # copy custom style to output
            style_path = ExternalPath("styles/custom.tex", custom_style)
            CopyWriter().write(course, style_path)

        with output_file.open("w", encoding="utf-8") as f:
            # write main
            template = self.templates.get_template(self.name)
            f.write(template.render(course=course, env=env, i18n=i18n, custom_style=custom_style))

    def initialize_templates(self):
        loader = FileSystemLoader(env.theme.get_templates_paths())
        environment = Environment(
            block_start_string='\\BLOCK{',
            block_end_string='}',
            variable_start_string='\\VAR{',
            variable_end_string='}',
            comment_start_string='\\#{',
            comment_end_string='}',
            line_statement_prefix='%%',
            line_comment_prefix='%#',
            trim_blocks=True,
            autoescape=False,
            loader=loader
        )
        return environment


class OverviewWriter(TemplateWriter):
    """Generate HTML overview files using a template."""

    def write(self, course: model.Course, course_path: Node) -> None:
        overview = course.get_overview(course_path.path)
        output_file = course_path.output_path.with_suffix('.html')
        create_parents(output_file)

        with output_file.open("w", encoding="utf-8") as f:
            template = self.templates.get_template(self.name)
            f.write(template.render(page=overview, overview=overview,
                                    course=course, env=env, i18n=i18n))


class Theme:
    def __init__(self, package: str, name: str):
        if name == 'common':
            raise EnvironmentError(
                'Theme with name "common" cannot be used to build a course!'
            )
        self.package = package
        self.name = name
        self.path = 'themes/' + self.name

    def get_styles_paths(self) -> List[Path]:
        return [
            Path(resource_filename('it4kt', 'themes/common/styles')),
            Path(resource_filename(self.package, self.path + '/styles')),
        ]

    def get_templates_paths(self) -> List[Path]:
        return [
            Path(resource_filename(self.package, self.path + '/templates')),
            Path(resource_filename('it4kt', 'themes/common/templates')),
        ]

    def get_watch_paths(self) -> List[Path]:
        """Get all paths that should be watched for auto-reload."""
        return self.get_styles_paths() + self.get_templates_paths()


@pass_context
def relative(context, url):
    """Compute URL relative to currently rendered page."""
    if urlparse(url).netloc == '':
        base = context['page'].path.parent
        relative_path = os.path.relpath(url, base)
        return Path(relative_path).as_posix()
    else:
        return url


def create_parents(path):
    path.parent.mkdir(exist_ok=True, parents=True)


def copy_files(src: Path, dst: Path):
    if src.is_dir():
        dst.mkdir(parents=True, exist_ok=True)
        for item in src.iterdir():
            copy_files(item, dst / item.name)
    else:
        shutil.copy(str(src), str(dst))
