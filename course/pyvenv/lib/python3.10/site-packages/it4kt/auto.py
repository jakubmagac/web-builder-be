import logging
import os
import sys
from it4kt.logger import logger

import livereload

import it4kt
import it4kt.configuration
import it4kt.build


class Server:
    def __init__(self, host=None, port=None):
        self._server = livereload.Server()
        if host is None:
            self.server_host = it4kt.env.config['dev-server']['host']
        else:
            self.server_host = host
        if port is None:
            self.server_port = it4kt.env.config['dev-server']['port']
        else:
            self.server_port = port
        self.builder = it4kt.build.Builder()

    def start(self, open_browser: bool) -> None:
        self.builder.build()
        self._setup_watchers()

        logging.getLogger('livereload').addFilter(LogsFilter())
        logger.info(f"Starting server at http://{self.server_host}:{self.server_port}/")

        open_url_delay = 1 if open_browser else None
        self._server.serve(
            host=self.server_host, port=self.server_port,
            root=str(it4kt.env.output_dir), open_url_delay=open_url_delay)

    def _setup_watchers(self):
        self._server.watch(it4kt.env.content_dir, func=self.builder.build)
        for path in it4kt.env.theme.get_watch_paths():
            self._server.watch(path, func=self.builder.build)
        self._server.watch(str(it4kt.configuration.CONFIGURATION_FILE),
                           func=reload_builder)
        self._server.watch(str(it4kt.configuration.CUSTOMIZATIONS_FILE),
                           func=reload_builder)


class LogsFilter(logging.Filter):
    """A simple filter to limit logging for livereload."""
    def filter(self, record: logging.LogRecord) -> bool:
        return record.levelno > logging.WARNING


def reload_builder():
    logger.info('Configuration file change detected. Restarting it4kt-builder...')
    open_browser = '--open-browser'
    if open_browser in sys.argv:
        sys.argv.remove(open_browser)
    os.execvp(sys.argv[0], sys.argv)
