from typing import Dict

from mistletoe import Document, HTMLRenderer
from mistletoe.block_token import Heading, SetextHeading, ThematicBreak, HTMLBlock
from mistletoe.latex_token import Math

from it4kt.kpimark.metadata import read_metadata, KeyDefinition, MetadataNormalizer

from it4kt.listtools import split_with, concat

META_KEYS = [
    KeyDefinition(["title", "nadpis"]),
    KeyDefinition(["subtitle", "podnadpis"]),
    KeyDefinition(["week", "týždeň"], int),
    KeyDefinition(["publication-week", "týždeň-zverejnenia"], int),
    KeyDefinition(['aspect-ratio', 'pomer-strán']),
    KeyDefinition(['theme', 'téma']),
]


class ShowerMark:
    normalizer = MetadataNormalizer(META_KEYS)

    def __init__(self):
        self.meta: Dict[str, str] = {}

    def render(self, text: str) -> str:
        lines = text.splitlines(keepends=True)
        metadata, lines = read_metadata(lines)
        self.meta = self.normalizer.normalize(metadata)
        with ShowerRenderer() as renderer:
            document = Document(lines)
            self.transform(document)
            rendered = renderer.render(document)
        return rendered

    def transform(self, document):
        document.children = self.split_to_slides(document.children)

    def split_to_slides(self, blocks):
        return concat(map(self.wrap_in_slide,
                          split_with(self.slide_start, blocks)))

    def wrap_in_slide(self, blocks):
        first = blocks[0]
        if isinstance(first, Heading) and first.level == 2:
            return SlideSection(blocks)
        elif isinstance(first, ThematicBreak):
            return SlideSection(blocks[1:])
        elif isinstance(first, SetextHeading) and first.level == 1:
            first.level = 2
            return SlideSection(blocks, " clear title")
        elif isinstance(first, SetextHeading) and first.level == 2:
            blocks[0] = ShoutHeading(first)
            return SlideSection(blocks)
        else:
            return blocks

    def slide_start(self, block):
        return ((isinstance(block, Heading) and block.level == 2)
                or isinstance(block, SetextHeading)
                or isinstance(block, ThematicBreak)
                or (isinstance(block, HTMLBlock) and block.content.startswith('<section')))

    def set_meta(self, meta):
        self.meta = meta


class SlideSection:
    def __init__(self, children, extra_class=""):
        self.children = children
        self.extra_class = extra_class


class ShoutHeading:
    def __init__(self, heading):
        self.level = heading.level
        self.children = heading.children


class ShowerRenderer(HTMLRenderer):
    def __init__(self):
        super().__init__(Math)
        self.render_map['SlideSection'] = self.render_slide_section
        self.render_map['ShoutHeading'] = self.render_shout_heading

    def render_slide_section(self, token):
        template = '<section class="slide{}">{}</section>'
        return template.format(token.extra_class, self.render_inner(token))

    def render_shout_heading(self, token):
        template = '<h{level} class="shout">{inner}</h{level}>'
        inner = self.render_inner(token)
        return template.format(level=token.level, inner=inner)

    def render_math(self, token):
        return '<span class="math">' + token.content + '</span>'
