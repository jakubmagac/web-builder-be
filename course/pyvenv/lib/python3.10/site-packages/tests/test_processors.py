from pathlib import Path
from typing import Optional

from it4kt.model import Course, Page
from it4kt.filesystem import Node
from it4kt.processors import Processor, Reader, Writer
from .utils import create_content_file, mock_root_filesystem


def create_testing_course_with_folder():
    create_content_file('index.xml')
    create_content_file('test.xml')
    folder_name = Path('test')
    create_content_file(folder_name, '01.xml')
    create_content_file(folder_name, '02.xml')
    create_content_file(folder_name, '03.xml')
    mock_root_filesystem()
    return folder_name


def test_processor_without_patterns(tmp_course_dir):
    """If no patterns were provided, no pages should be read."""
    create_testing_course_with_folder()
    assert Processor(Path(''), []).read() == []


def test_processor_ignores_unread(tmp_course_dir):
    """Processor should ignore files that were not read by reader."""
    create_content_file("test.xml")
    mock_root_filesystem()
    test_reader = ReaderMock(return_none=True)
    pages = Processor(Path(''), [('test.xml', test_reader, None)]).read()
    assert pages == []


def test_processor_reads_pages(tmp_course_dir):
    """Processor should read all pages matching the pattern."""
    folder_name = create_testing_course_with_folder()
    reader = ReaderMock()
    patterns = [('*.xml', reader, None)]
    pages = Processor(folder_name, patterns).read()
    assert reader.was_called()
    assert set(pages) == set(reader.read_pages)


def test_processor_writes_pages(tmp_course_dir):
    """Processor should call writer for all read pages."""
    folder_name = create_testing_course_with_folder()
    writer = WriterMock()
    patterns = [('*.xml', None, writer)]
    processor = Processor(folder_name, patterns)
    processor.write(Course("Testing course"))
    assert writer.was_called_for(Path('test/01.xml'))
    assert writer.was_called_for(Path('test/02.xml'))
    assert writer.was_called_for(Path('test/03.xml'))


def test_processor_ignores_non_existing_folder(tmp_course_dir):
    """Given the folder does not exist, Processor should do nothing."""
    mock_root_filesystem()
    processor = Processor(Path('test'), [])
    assert processor.read() == []
    processor.write(Course("Test"))
    assert not Path('output', 'test').exists()


class ReaderMock(Reader):
    def __init__(self, return_none=False):
        self.return_none = return_none
        self.read_pages = []

    def read(self, path: Node) -> Optional[Page]:
        if self.return_none:
            return None
        page = Page(path.path)
        self.read_pages.append(page)
        return page

    def was_called(self) -> bool:
        return len(self.read_pages) != 0


class WriterMock(Writer):
    def __init__(self):
        self.called_paths = []

    def write(self, course: Course, node: Node) -> None:
        self.called_paths.append(node.path)

    def was_called_for(self, path: Path) -> bool:
        return path in self.called_paths
