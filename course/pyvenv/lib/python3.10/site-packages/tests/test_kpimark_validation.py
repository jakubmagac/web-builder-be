from pathlib import Path
from it4kt.kpimark.tokens.meta import MetaBlock
from it4kt.kpimark.tokens.sections import ResourcesBlock
from it4kt.kpimark.tokens.sections import AdditionalResourcesBlock
from it4kt.kpimark.kpimark import KPIMARK_TOKENS, Document
from it4kt.kpimark.validation.reporter import Reporter
from it4kt.kpimark.validation.shaper import Shape
from it4kt.kpimark.validation.validator import Validator


def test_contains_order_good():
    test_shape = Shape(Document).contains_order([
        MetaBlock,
        Shape(ResourcesBlock).required
    ])
    # create fake tokens
    meta = MetaBlock({'title': "Nazov"})
    resoures = ResourcesBlock(({"keyword": "Zdroje"}, ""))
    document = Document("")
    document.children = [
        meta,
        resoures
    ]

    reporter = Reporter(Path("test.md"), "strict")
    valid = test_shape.check(document, reporter)
    assert valid


def test_contains_order_wrong():
    test_shape = Shape(Document).contains_order([
        MetaBlock,
        Shape(ResourcesBlock).required
    ])
    # create fake tokens
    meta = MetaBlock({'title': "Nazov"})
    document = Document("")
    document.children = [
        meta,
    ]

    reporter = Reporter(Path("test.md"), "strict")
    valid = test_shape.check(document, reporter)
    assert not valid


def test_contains_order_incomplete():
    test_shape = Shape(Document).contains_order([
        MetaBlock,
        Shape(ResourcesBlock).required.multiple
    ])
    # create fake tokens
    meta = MetaBlock({'title': "Nazov"})
    resoures = ResourcesBlock(({"keyword": "Zdroje"}, ""))
    add_resoures = AdditionalResourcesBlock(({"keyword": "Doplnujuce Zdroje"}, ""))
    document = Document("")
    document.children = [
        meta,
        resoures,
        resoures,
        add_resoures
    ]

    reporter = Reporter(Path("test.md"), "strict")
    valid = test_shape.check(document, reporter)
    # should not pass validator
    assert not valid


def test_contains_all_of():
    test_shape = Shape(Document).contains_all_of(ResourcesBlock)
    # create fake tokens
    document = Document("")
    meta = MetaBlock({'title': "Nazov"})
    resoures = ResourcesBlock(({"keyword": "Zdroje"}, ""))

    # create fake reporter
    reporter = Reporter(Path("test.md"), "strict")

    document.children = [resoures, resoures]
    valid = test_shape.check(document, reporter)
    assert valid

    document.children = [resoures]
    valid = test_shape.check(document, reporter)
    assert valid

    document.children = [resoures, meta]
    valid = test_shape.check(document, reporter)
    assert not valid

    document.children = [meta]
    valid = test_shape.check(document, reporter)
    assert not valid

    document.children = []
    valid = test_shape.check(document, reporter)
    assert not valid


def test_contains_any_of():
    test_shape = Shape(Document).contains_any_of([
        MetaBlock,
        Shape(ResourcesBlock)
    ])
    # create fake tokens
    document = Document("")
    meta = MetaBlock({'title': "Nazov"})
    resoures = ResourcesBlock(({"keyword": "Zdroje"}, ""))

    # create fake reporter
    reporter = Reporter(Path("test.md"), "strict")

    # contains both case
    document.children = [meta, resoures]
    valid = test_shape.check(document, reporter)
    assert valid

    # contains only one
    document.children = [meta]
    valid = test_shape.check(document, reporter)
    assert valid

    # contains none
    document.children = []
    valid = test_shape.check(document, reporter)
    assert not valid


def test_contains_one_of():
    test_shape = Shape(Document).contains_one_of([
        MetaBlock,
        Shape(ResourcesBlock)
    ])
    # create fake tokens
    document = Document("")
    meta = MetaBlock({'title': "Nazov"})
    resoures = ResourcesBlock(({"keyword": "Zdroje"}, ""))

    # create fake reporter
    reporter = Reporter(Path("test.md"), "strict")

    # contains both case
    document.children = [meta, resoures]
    valid = test_shape.check(document, reporter)
    assert not valid

    # contains only one
    document.children = [meta]
    valid = test_shape.check(document, reporter)
    assert valid

    # contains none
    document.children = []
    valid = test_shape.check(document, reporter)
    assert not valid


def test_required():
    test_shape_1 = Shape(Document).contains_any_of([
        MetaBlock,
        ResourcesBlock,
    ])

    test_shape_2 = Shape(Document).contains_any_of([
        Shape(MetaBlock).required,
        ResourcesBlock,
    ])

    # create fake tokens
    document = Document("")
    meta = MetaBlock({'title': "Nazov"})
    resoures = ResourcesBlock(({"keyword": "Zdroje"}, ""))

    # create fake reporter
    reporter = Reporter(Path("test.md"), "strict")

    document.children = [meta, resoures]
    valid = test_shape_1.check(document, reporter)
    assert valid

    document.children = [resoures]
    valid = test_shape_1.check(document, reporter)
    assert valid

    document.children = [meta, resoures]
    valid = test_shape_2.check(document, reporter)
    assert valid

    document.children = [resoures]
    valid = test_shape_2.check(document, reporter)
    assert not valid


def test_multiple():
    test_shape_1 = Shape(Document).contains_any_of([
        MetaBlock,
        ResourcesBlock,
    ])

    test_shape_2 = Shape(Document).contains_any_of([
        Shape(MetaBlock).multiple,
        ResourcesBlock,
    ])

    # create fake tokens
    document = Document("")
    meta = MetaBlock({'title': "Nazov"})
    resoures = ResourcesBlock(({"keyword": "Zdroje"}, ""))

    # create fake reporter
    reporter = Reporter(Path("test.md"), "strict")

    document.children = [meta, meta, resoures]
    valid = test_shape_1.check(document, reporter)
    assert not valid

    document.children = [meta, resoures]
    valid = test_shape_1.check(document, reporter)
    assert valid

    document.children = [meta, meta, resoures]
    valid = test_shape_2.check(document, reporter)
    assert valid

    document.children = [meta, resoures]
    valid = test_shape_2.check(document, reporter)
    assert valid


def test_first_last():
    test_shape_1 = Shape(Document).contains_any_of([
        Shape(MetaBlock).first,
        ResourcesBlock,
    ])

    test_shape_2 = Shape(Document).contains_any_of([
        Shape(MetaBlock).last,
        ResourcesBlock,
    ])

    # create fake tokens
    document = Document("")
    meta = MetaBlock({'title': "Nazov"})
    resoures = ResourcesBlock(({"keyword": "Zdroje"}, ""))

    # create fake reporter
    reporter = Reporter(Path("test.md"), "strict")

    # contains both case
    document.children = [meta, resoures]
    valid = test_shape_1.check(document, reporter)
    assert valid

    document.children = [resoures, meta]
    valid = test_shape_1.check(document, reporter)
    assert not valid

    document.children = [meta, resoures]
    valid = test_shape_2.check(document, reporter)
    assert not valid

    document.children = [resoures, meta]
    valid = test_shape_2.check(document, reporter)
    assert valid


def test_min_max():
    test_shape_1 = Shape(Document).contains_any_of([
        MetaBlock,
        Shape(ResourcesBlock).min(2).max(4),
    ])

    # create fake tokens
    document = Document("")
    meta = MetaBlock({'title': "Nazov"})
    resoures = ResourcesBlock(({"keyword": "Zdroje"}, ""))

    # create fake reporter
    reporter = Reporter(Path("test.md"), "strict")

    document.children = [meta, resoures, resoures, resoures, resoures, resoures]
    valid = test_shape_1.check(document, reporter)
    assert not valid

    document.children = [meta, resoures, resoures, resoures, resoures]
    valid = test_shape_1.check(document, reporter)
    assert valid

    document.children = [meta, resoures, resoures, resoures]
    valid = test_shape_1.check(document, reporter)
    assert valid

    document.children = [meta, resoures, resoures]
    valid = test_shape_1.check(document, reporter)
    assert valid

    document.children = [meta, resoures]
    valid = test_shape_1.check(document, reporter)
    assert not valid

    document.children = [meta]
    valid = test_shape_1.check(document, reporter)
    assert not valid


def test_validation_turned_off():
    # create fake tokens and turn off validation
    document = Document("")
    meta = MetaBlock({'title': "Nazov", "validation": "None"})
    resoures = ResourcesBlock(({"keyword": "Zdroje"}, ""))

    # test manually turned off validation
    validator = Validator("test.md", "scenario", "strict", KPIMARK_TOKENS)
    document.children = [meta, resoures]
    assert validator.validate(document)

    # test when configuration set validation to None
    validator = Validator("test.md", "scenario", None, KPIMARK_TOKENS)
    meta = MetaBlock({'title': "Nazov"})
    document.children = [meta, resoures]
    assert validator.validate(document)
