from pathlib import Path

from it4kt.kpimark import Kpimark
from it4kt.model import Page
from it4kt.readers import KpimarkReader
from .utils import filesystem_find


def test_meta_data(testing_course):
    course_path = filesystem_find(Path("labs", "test.md"))
    output_page = KpimarkReader("scenario", validation=None).read(
        course_path
    )
    assert output_page.title == "Názov dokumentu"
    assert output_page.subtitle == "Podnadpis dokumentu"


def test_lecturer_occurrence(testing_course):
    course_path = filesystem_find(Path("labs", "test.md"))
    output_page = KpimarkReader("scenario", validation=None).read(
        course_path
    )
    assert 'class="lecturer"' in output_page.lecturer_content
    assert 'class="lecturer"' not in output_page.student_content


def test_kpi_fenced_code_block_in_alertblock(testing_course):
    course_path = filesystem_find(Path("labs", "test.md"))
    output_page = KpimarkReader("scenario", validation=None).read(
        course_path
    )
    assert (
        '<pre class="code"><code class="language-python' in output_page.student_content
    )
    assert (
        '<pre class="code"><code class="language-python' in output_page.lecturer_content
    )


def test_figure_caption_block(testing_course):
    course_path = filesystem_find(Path("labs", "test.md"))
    output_page = KpimarkReader("scenario", validation=None).read(
        course_path
    )
    figure_match = (
        '<figure class="figure">'
        '<img src="images/test.png" alt="Preklad pomocou javac">'
        '<figcaption>')

    output_stripped = output_page.student_content.replace("    ", "").replace("\n", "")
    assert figure_match in output_stripped


def test_figure_with_link(testing_course):
    text = "![Text with [link](http://example.com/)!](image.jpg)"
    processor = Kpimark('page', None)
    processor.reset()
    output = processor.render_html(text, Path('test.md'))
    stripped_output = output.replace("    ", "").replace("\n", "")
    assert (
        '<figure class="figure">'
        '<img src="image.jpg" alt="Text with link!" />'
        '<figcaption><span class="figure__number">Obr. 1:</span> '
        '<span class="figure__caption">Text with <a href="http://example.com/">link</a>!</span>'
        '</figcaption>'
        '</figure>') in stripped_output


def test_figure_with_quotes(testing_course):
    text = '![Text with "quotes"](image.jpg)'
    processor = Kpimark('page', None)
    output = processor.render_html(text, Path('test.md'))
    assert '<img src="image.jpg" alt="Text with &#34;quotes&#34;" />' in output


def test_counting_figure_caption_block(testing_course):
    course_path = filesystem_find(Path("labs", "test.md"))
    output_page = KpimarkReader("scenario", validation=None).read(
        course_path
    )
    figure_counting_match_template = '<span class="figure__number">Obr. %d:'

    for i in range(1, 4):
        assert (figure_counting_match_template % i) in output_page.student_content


def test_objectives_block(testing_course):
    course_path = filesystem_find(Path("labs", "test.md"))
    output_page = KpimarkReader("scenario", validation=None).read(
        course_path
    )
    objectives_match = (
        '<section class="section section--objectives">'
        '<h2 class="section__header">Ciele</h2>'
        '<ol class="objectives">'
        '<li class="objective" id="objective-testovanie">'
        'Oboznámiť sa so syntaxou KPIMarku a splniť určené úlohy.</li>'
        '<li class="objective">Vyplniť dotazník používateľského testovania.</li>'
        '</ol>')

    output_stripped = output_page.student_content.replace("    ", "").replace("\n", "")
    assert objectives_match in output_stripped


def test_step_with_counting(testing_course):
    course_path = filesystem_find(Path("labs", "test.md"))
    output_page = KpimarkReader("scenario", validation=None).read(
        course_path
    )

    step_1 = (
        '<section class="step" id="step-1">'
        '<h3 class="step__header step__header--with-title">'
        '<span class="step__keyword">Krok </span>'
        '<span class="step__number">1</span>'
        '<span class="step__colon">: </span>'
        '<span class="step__title">Lorem lipsum dolor sit amet.</span>'
        '</h3>')
    step_2_without_title = (
        '<section class="step" id="step-2">'
        '<h3 class="step__header step__header--without-title">'
        '<span class="step__keyword">Krok </span>'
        '<span class="step__number">2</span></h3>')

    output_stripped = output_page.student_content.replace("    ", "").replace("\n", "")
    assert step_1 in output_stripped
    assert step_2_without_title in output_stripped


def test_tasks_in_step_counting(testing_course):
    """
    Tries to find 3 tasks in first and 3 tasks in seconds step. Matching by header.
    """
    course_path = filesystem_find(Path("labs", "test.md"))
    output_page = KpimarkReader("scenario", validation=None).read(
        course_path
    )

    task_match_template = (
        '<h4 class="task__header">Úloha <span class="task__number">%d.%d</span>'
    )
    for i in range(1, 3):
        for z in range(1, 4):
            assert (task_match_template % (i, z)) in output_page.student_content


def test_additional_tasks_counting(testing_course):
    text = """## Additional tasks
> Task:
> Hello world!
"""
    html = Kpimark("scenario", validation=None).render_html(text, "test.md")
    assert '<span class="task__number">A.1</span>' in html


def test_summary_section_rendered(testing_course):
    course_path = filesystem_find(Path("labs", "test.md"))
    looking_for = '<section class="section section--summary">'

    page = KpimarkReader("scenario", validation=None).read(course_path)
    output = page.student_content
    assert looking_for in output


def test_default_section_rendered(testing_course):
    course_path = filesystem_find(Path("test_page.md"))
    output_page = KpimarkReader("page", validation=None).read(course_path)
    default_block_match = (
        '<section class="section section--section">'
        '<h2 class="section__header">This is KHeadingBlock</h2>'
    )
    stripped_content = output_page.student_content.replace("    ", "").replace("\n", "")
    assert default_block_match in stripped_content


def test_top_level_paragraph(testing_course):
    course_path = filesystem_find(Path("test_page.md"))
    output_page = KpimarkReader("scenario", validation=None).read(course_path)
    default_block_match = ("<p>Praesent lacinia mauris dolor, "
                           "a convallis urna feugiat eget. Pellentesque sapien diam, "
                           "fringilla vitae neque ac, iaculis vehicula urna. "
                           "Ut eu condimentum metus. Aliquam erat volutpata.</p>"
                           )

    assert default_block_match in output_page.student_content


def test_default_section(testing_course):
    course_path = filesystem_find(Path("test_page.md"))
    output_page = KpimarkReader("scenario", validation=None).read(course_path)
    default_block_match = ('<section class="section section--section">'
                           '<h2 class="section__header">This is KHeadingBlock</h2>')
    output_stripped = output_page.student_content.replace("    ", "").replace("\n", "")
    assert default_block_match in output_stripped


def test_wrong_example_rendered(testing_course):
    course_path = filesystem_find(Path("labs", "test.md"))
    looking_for = '<div class="example example--wrong">'
    page = KpimarkReader("scenario", validation=None).read(course_path)
    output = page.student_content
    assert looking_for in output


def test_nested_admonition_rendered(testing_course):
    course_path = filesystem_find(Path("labs", "test.md"))
    page = KpimarkReader("scenario").read(course_path)

    if isinstance(page, Page):
        note_container = page.element_tree.find_class("admonition--note")[0]
        assert len(note_container) == 2

        note_content = note_container.find_class("admonition__content")[0]
        nested_admonition = note_content.find_class("admonition--warning")
        assert nested_admonition
    else:
        assert False


def test_youtube_rendered(testing_course):
    course_path = filesystem_find(Path("labs", "test.md"))
    looking_for = '<div class="media media--youtube">'

    page = KpimarkReader("scenario", validation=None).read(course_path)
    output = page.student_content
    assert looking_for in output


def test_video_rendered(testing_course):
    course_path = filesystem_find(Path("labs", "test.md"))
    looking_for = '<video class="media__video" controls>'

    page = KpimarkReader("scenario", validation=None).read(course_path)
    output = page.student_content
    assert looking_for in output


def test_audio_rendered(testing_course):
    course_path = filesystem_find(Path("labs", "test.md"))
    looking_for = '<audio class="media__audio" controls>'

    page = KpimarkReader("scenario", validation=None).read(course_path)
    output = page.student_content
    assert looking_for in output


def test_table_container(testing_course):
    course_path = filesystem_find(Path("labs", "test.md"))
    table_container = '<div class="table"><table class="table__table">'

    page = KpimarkReader("scenario", validation=None).read(course_path)
    output = page.student_content
    assert table_container in output


def test_latex_math_render(testing_course):
    course_path = filesystem_find(Path("labs", "test.md"))

    match_begin = "$$"
    match_1 = "\\begin{matrix}"
    match_2 = "1 &amp; x &amp; x^2 \\\\"
    match_3 = "1 &amp; y &amp; y^2 \\\\"
    match_4 = "1 &amp; z &amp; z^2 \\\\"
    match_5 = "\\end{matrix}"
    match_end = "$$"

    page = KpimarkReader("scenario", validation=None).read(course_path)
    assert match_begin in page.student_content
    assert match_1 in page.student_content
    assert match_2 in page.student_content
    assert match_3 in page.student_content
    assert match_4 in page.student_content
    assert match_5 in page.student_content
    assert match_end in page.student_content


def test_week_number_from_metadata(testing_course):
    course_path = filesystem_find(Path("labs", "test.md"))
    page = KpimarkReader("scenario", validation=None).read(course_path)
    assert page.week == 10


def test_week_number_from_filename(testing_course):
    course_path = filesystem_find(Path("labs", "01.md"))
    page = KpimarkReader("scenario", validation=None).read(course_path)
    assert page.week == 1


def test_publication_week_from_metadata(testing_course):
    course_path = filesystem_find(Path("labs", "test.md"))
    page = KpimarkReader("scenario", validation=None).read(course_path)
    assert page.publication_week == 7


def test_multiparagraph_admonition(testing_course):
    course_path = filesystem_find(Path("labs", "multiparagraph-admonition.md"))
    page = KpimarkReader("scenario", validation=None).read(
        course_path
    )
    if isinstance(page, Page):
        task_content = page.element_tree.find_class("task__content")[0]
        assert len(task_content) == 2
        assert task_content[0].tag == "p"
        assert task_content[1].tag == "p"
    else:
        assert False


def test_markup_in_page_headings(testing_course):
    text = "## *Hello* `world`"
    html = Kpimark("page", validation=None).render_html(text, "test.md")
    assert '<h2 class="section__header"><em>Hello</em> <code>world</code></h2>' in html


def test_markup_in_step_titles(testing_course):
    text = "## Step: *Hello* `world`"
    html = Kpimark("scenario", validation=None).render_html(text, "test.md")
    assert '<span class="step__title"><em>Hello</em> <code>world</code></span></h3>' in html
