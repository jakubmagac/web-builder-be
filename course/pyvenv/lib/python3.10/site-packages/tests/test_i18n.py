from pathlib import Path
import it4kt
import it4kt.configuration


def test_parse_i18_config(i18n_course):
    it4kt.configuration.read_translation_configuration()
    assert it4kt.i18n.languages == ['sk', 'en', 'ru']
    assert it4kt.i18n.fallback_lang == 'sk'


def test_t_from_config(i18n_course):
    t_from_config = it4kt.i18n.t_from_config
    # get config to test
    config_course = it4kt.env.config['course']
    config_links = it4kt.env.config['links']

    it4kt.i18n.change_language("sk")
    assert t_from_config(
        config_course['title']) == 'Názov predmetu'
    assert t_from_config(
        config_links[0]['title']) == 'KPI'
    assert t_from_config(
        config_links[0]['url']) == "https://kpi.fei.tuke.sk/"

    it4kt.i18n.change_language("en")
    assert t_from_config(
        config_course['title']) == 'Course Name'
    assert t_from_config(
        config_links[0]['title']) == 'KPI'
    assert t_from_config(
        config_links[0]['url']) == "https://kpi.fei.tuke.sk/en"

    it4kt.i18n.change_language("ru")
    assert t_from_config(
        config_course['title']) == 'название предмета'
    assert t_from_config(
        config_links[0]['title']) == 'КПИ'
    assert t_from_config(
        config_links[0]['url']) == 'https://kpi.fei.tuke.sk/en'


def test_t_with_namespaces(i18n_course):
    t = it4kt.i18n.t

    it4kt.i18n.change_language("sk")
    assert t("builder:title") == "Názov"
    assert t("builder:subtitle") == "Podnadpis"
    assert t("theme:sk") == "Slovenčina"

    it4kt.i18n.change_language("en")
    assert t("builder:title") == "Title"
    assert t("builder:subtitle") == "Subtitle"
    assert t("theme:en") == "English"


def test_missing_t(i18n_course):
    t = it4kt.i18n.t
    # when key is missing we will just use string behind namespace and warn user
    assert t("builder:builder") == "builder"


def test_add_language_prefix(i18n_course):
    """
    add_language_suffix(Path("page/index.html"))      ->  'page/index.en.html'
    add_language_suffix(Path("page/index.css.html"))  ->  'page/index.en.css.html'
    add_language_suffix(Path("page/index.sk.html"))   ->  'page/index.sk.html'
    add_language_suffix(Path("page/index.en.html"))   ->  'page/index.en.html'
    """
    i18_path = it4kt.i18n.path
    it4kt.i18n.change_language("en")
    assert (i18_path.add_language_suffix(Path("page/index.html"))
            == Path("page/index.en.html"))
    assert (i18_path.add_language_suffix(Path("page/index.css.html"))
            == Path("page/index.en.css.html"))
    assert (i18_path.add_language_suffix(Path("page/index.sk.html"))
            == Path("page/index.sk.html"))
    assert (i18_path.add_language_suffix(Path("page/index.en.html"))
            == Path("page/index.en.html"))


def test_remove_language_prefix(i18n_course):
    """
    remove_language_suffix(Path("page/index.css.en.html"))  ->   'page/css.en.html'
    remove_language_suffix(Path("page/index.en.css.html"))  ->   'page/index.css.html'
    remove_language_suffix(Path("page/index.en.html"))      ->   'page/index.html'
    remove_language_suffix(Path("page/index.html"))         ->   'page/index.html'
    """
    i18_path = it4kt.i18n.path
    it4kt.i18n.change_language("en")
    assert (i18_path.remove_language_suffix(Path("page/index.css.en.html"))
            == Path("page/index.css.en.html"))
    assert (i18_path.remove_language_suffix(Path("page/index.en.css.html"))
            == Path("page/index.css.html"))
    assert (i18_path.remove_language_suffix(Path("page/index.en.html"))
            == Path("page/index.html"))
    assert (i18_path.remove_language_suffix(Path("page/index.html"))
            == Path("page/index.html"))


def test_localize(i18n_course):
    localize = it4kt.i18n.path.localize
    content_dir = it4kt.env.content_dir
    it4kt.i18n.change_language("en")

    assert localize(Path(content_dir, "index.md")) == (
        content_dir / Path('index.en.md'))
    assert localize(Path(content_dir, "index.en.md")) == (
        content_dir / Path('index.en.md'))

    it4kt.i18n.change_language("ru")
    assert localize(Path(content_dir, "example-page.en.xml")) == (
        content_dir / Path('example-page.ru.xml'))
    assert localize(Path(content_dir, "index.md")) == (
        content_dir / Path('index.md'))


def test_localize_no_fallback(i18n_nonfallback_course):
    localize = it4kt.i18n.path.localize
    content_dir = it4kt.env.content_dir
    it4kt.i18n.change_language("ru")
    it4kt.i18n.fallback_lang = None

    # following should pass because example-page.ru.xml is translation for first file
    assert localize(Path(content_dir, "example-page.en.xml")
                    ) == content_dir / Path('example-page.ru.xml')

    assert localize(Path(content_dir, "example-page.ru.xml")) is not None

    # following should pass because even when fallback_lang isn't set then default_lang
    # should match index.md
    assert localize(Path(content_dir, "index.md")) is not None

    # following should be null because ru translation for labs/02.md does not exist
    # and fallback language is not set!
    assert localize(Path(content_dir, "labs", "02.ru.md")) is None


def test_localize_non_existing(i18n_course):
    localize = it4kt.i18n.path.localize
    content_dir = it4kt.env.content_dir
    it4kt.i18n.change_language("ru")
    assert localize(Path(content_dir, "non-existing.md")) is None
