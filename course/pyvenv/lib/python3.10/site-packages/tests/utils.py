"""Utility functions and constants for tests."""
from doctest import Example
from pathlib import Path
from it4kt.filesystem import FileSystem, Node

import pytest
from lxml import etree
from lxml.doctestcompare import LXMLOutputChecker

from it4kt import env


_html_parser = etree.HTMLParser(recover=True, remove_blank_text=True)


def assert_xml_equals(reference, result):
    """Compare if XML documents are equal except formatting."""
    checker = LHTML5OutputChecker()
    if not checker.check_output(reference, result, 0):
        message = checker.output_difference(Example('', reference), result, 0)
        pytest.fail(message)


class LHTML5OutputChecker(LXMLOutputChecker):
    """Custom output checker with HTML parser, that can deal with HTML5."""
    def get_default_parser(self):
        def html_fromstring(html):
            return etree.fromstring(html, _html_parser)
        return html_fromstring


def create_content_file(*path_segments) -> Path:
    """Create file in the content dir and return relative path."""
    path = Path(*path_segments)
    content_path = env.content_dir / path
    content_path.parent.mkdir(exist_ok=True, parents=True)
    content_path.touch()
    return path


def create_output_file(*path_segments) -> Path:
    """Create file in the content dir and return relative path."""
    path = Path(*path_segments)
    content_path = env.output_dir / path
    content_path.parent.mkdir(exist_ok=True, parents=True)
    content_path.touch()
    return path


def mock_root_filesystem() -> None:
    env.fs = FileSystem(Path(''))
    assert env.fs is not None


def mock_filesystem_find(*path_segments) -> Node:
    env.fs = FileSystem(Path(''))
    course_dir = env.fs.find(Path(*path_segments))
    assert course_dir is not None
    return course_dir


def filesystem_find(path: Path) -> Node:
    course_node = env.fs.find(path)
    assert course_node is not None
    return course_node
