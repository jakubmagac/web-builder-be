from operator import attrgetter
from pathlib import Path
from typing import Tuple, Sequence

import pytest
from lxml import html

import it4kt
from it4kt.model import Folder, Page, Course, Link, make_acronym, Overview


def test_course_has_folders():
    """Course should provide a list of folders maintaining order."""
    course, _, folders, _ = create_testing_course()
    assert list(course.folders) == folders


def test_course_has_pages():
    """Course should provide a list of top-level pages ordered with index first."""
    course, pages, _, _ = create_testing_course()
    assert list(course.pages) == pages


def test_course_has_menu():
    """Menu of the course should contain top-level pages followed by folders."""
    course, pages, folders, links = create_testing_course()
    assert list(course.menu) == pages + folders + links


def test_course_menu_excludes_untitled_folders():
    """Folders without title should not appear in the menu."""
    course = Course("Testing course")
    folders = [
        Folder(Path('with-title'), "Title"),
        Folder(Path('without-title'), None)]
    course.put_folders(folders)
    assert list(course.menu) == folders[:1]


def test_get_top_level_page():
    """Course should allow finding top-level pages by path."""
    course, _, _, _ = create_testing_course()
    path = Path('index.xml')
    assert course.get_by_path(path).path == path


def test_get_nested_page():
    """Course should allow finding pages in folders by path."""
    course, _, _, _ = create_testing_course()
    path = Path('first/01.xml')
    assert course.get_by_path(path).path == path


def test_course_has_overview():
    """Course should have an overview page on a right URL."""
    course, _, _, _ = create_testing_course()
    overview = course.course_overview
    assert isinstance(overview, Overview)
    assert overview.url == 'overview.html'


def test_course_has_objectives_overview():
    """Course should have an objectives overview page on a right URL."""
    course, _, _, _ = create_testing_course()
    overview = course.objectives_overview
    assert isinstance(overview, Overview)
    assert overview.url == 'objectives_overview.html'


def test_page_has_url():
    """Page should have an url with html suffix."""
    page = Page(Path('example/01.xml'))
    assert page.url == 'example/01.html'


def test_translated_urls_from_default():
    """Translated URLs should correctly point to translation subdir or root."""
    page = Page(Path("a.md"))
    it4kt.i18n.language = "sk"
    assert page.translated_url("en") == "en/a.html"
    assert page.translated_url("sk") == "a.html"


def test_translated_urls_from_secondary_language():
    """Translated URLs should correctly point to translation subdir or root."""
    page = Page(Path("a.md"))
    it4kt.i18n.language = "en"
    assert page.translated_url("en") == "../en/a.html"
    assert page.translated_url("sk") == "../a.html"


def test_page_has_no_subitems():
    """Page should not have subitems."""
    page = Page(Path('example/01.xml'))
    assert page.subitems is None


def test_folder_has_subitems():
    """Folder should have subitems with its pages."""
    folder, pages = create_testing_folder()
    assert set(folder.subitems) == set(pages)


def test_is_homepage():
    homepage = Page(Path('index.xml'))
    assert homepage.is_homepage()
    page = Page(Path('test.xml'))
    assert not page.is_homepage()


def test_is_folder():
    page = Page(Path('index.xml'))
    assert not page.is_folder()
    link = Link('Example', 'http://example.com')
    assert not link.is_folder()
    folder = Folder(Path('test'), 'Test')
    assert folder.is_folder()


def test_is_external():
    page = Page(Path('index.xml'))
    assert not page.is_external()
    link = Link('Example', 'http://example.com')
    assert link.is_external()


def test_get_objectives():
    code = """<div class="page-contents">
        <section class="section section--objectives">
            <h2 class="section__header">Ciele</h2>
            <ol class="objectives">
                <li class="objective" id="objective-prvy-ciel">Complete exercises.</li>
                <li class="objective" id="objective-prvy-ciel">
                    Check <strong>HTML</strong> <code>code</code>.
                </li>
                <li class="objective" id="objective-prvy-ciel"><code>do</code></li>
            </ol>
        </section>
    </div>
    """
    page = Page(Path("test.md"))
    page.element_tree = html.fragment_fromstring(code)
    assert page.get_objectives() == [
        "Complete exercises.",
        "Check <strong>HTML</strong> <code>code</code>.",
        "<code>do</code>"
    ]


def test_pages_sorting_by_week():
    """Pages in a folder should be sorted by week number."""
    folder, pages = create_testing_folder()
    pages[0].week = 3
    pages[1].week = 2
    pages[2].week = 1
    assert is_sorted(folder.subitems, key=attrgetter('week'))


def test_pages_sorting_if_week_is_the_same():
    """If week is the same pages should be sorted by path."""
    folder, pages = create_testing_folder()
    assert is_sorted(folder.subitems, key=attrgetter('path'))


def test_missing_week():
    """Pages without week number should be placed at the end of the list."""
    folder, pages = create_testing_folder()
    pages[2].week = 1
    assert folder.subitems == [pages[2], pages[0], pages[1]]


def test_page_student_mode():
    """Given lecturer_mode is off, page should return content for student."""
    page = Page(Path("test.xml"))
    page.element_tree = html.fragment_fromstring(
        '<div><p>For student</p><p class="lecturer">For lecturer</p></div>')
    assert page.content == page.student_content


def test_page_lecturer_mode():
    """Given lecturer_mode is on, page should return content for lecturer."""
    page = Page(Path("test.xml"))
    page.element_tree = html.fragment_fromstring(
        '<div><p>For student</p><p class="lecturer">For lecturer</p></div>')
    it4kt.env.lecturer_mode = True
    assert page.content == page.lecturer_content


def test_hiding_future_weeks():
    page = Page(Path('test.xml'))
    page.week = 5
    assert not page.is_hidden()
    it4kt.env.config['published-weeks'] = 4
    assert page.is_hidden()
    it4kt.env.config['published-weeks'] = 5
    assert not page.is_hidden()
    it4kt.env.config['published-weeks'] = 6
    assert not page.is_hidden()


def test_not_hiding_in_lecturer_mode():
    page = Page(Path('test.xml'))
    page.week = 5
    it4kt.env.config['published-weeks'] = 4
    it4kt.env.lecturer_mode = True
    assert not page.is_hidden()


def test_publication_week():
    page = Page(Path('test.xml'))
    page.week = 5
    page.publication_week = 3
    it4kt.env.config['published-weeks'] = 4
    assert not page.is_hidden()


def test_hidden_pages_not_accessible_by_path():
    course, _, folders, _ = create_testing_course()
    page_path = Path("first/01.xml")
    it4kt.env.config['published-weeks'] = 4  # Before week of the page
    # Student mode -> hidden
    it4kt.env.lecturer_mode = False
    with pytest.raises(KeyError):
        course.get_by_path(page_path)
    # Lecturer mode -> OK
    it4kt.env.lecturer_mode = True
    assert course.get_by_path(page_path) is not None


def test_acronym():
    assert make_acronym('Základy softvérového inžinierstva') == 'ZSI'


def test_acronym_with_short_words():
    assert make_acronym('Formálne jazyky a prekladače') == 'FJaP'


def test_acronym_with_multiple_spaces():
    assert make_acronym('Paralelné  programovanie') == 'PP'


def test_overview_untitled_folders():
    folders = [
        Folder(Path('with-title'), "Title"),
        Folder(Path('without-title'), None)]
    overview = Overview(Path("/overview.html"), folders)
    assert folders[0] in list(overview.folders)
    assert folders[1] not in list(overview.folders)


def create_testing_course() -> \
        Tuple[Course, Sequence[Page], Sequence[Folder], Sequence[Link]]:
    course = Course("Testing course")
    pages = [
        Page(Path('index.xml')),
        Page(Path('about.xml')),
        Page(Path('resources.xml'))]
    folders = [
        Folder(Path('first'), "First"),
        Folder(Path('second'), "Second"),
        Folder(Path('third'), "third")]
    page = Page(Path('first/01.xml'))
    page.week = 5
    folders[0].put_pages([page])
    links = [
        Link('KPI', 'https://kpi.fei.tuke.sk/')
    ]
    course.put_pages([pages[2], pages[0], pages[1]])
    course.put_folders(folders)
    course.put_links(links)
    return course, pages, folders, links


def create_testing_folder() -> Tuple[Folder, Sequence[Page]]:
    folder = Folder(Path('example'), "Example")
    pages = [Page(Path('example/01.xml')), Page(Path('example/03.xml')),
             Page(Path('example/02.xml'))]
    folder.put_pages(pages)
    return folder, pages


def is_sorted(lst, key=lambda x: x):
    return all(key(lst[i]) <= key(lst[i + 1]) for i in range(len(lst) - 1))
