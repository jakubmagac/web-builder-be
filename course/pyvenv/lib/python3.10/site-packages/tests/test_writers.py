import os
import filecmp
from pathlib import Path
from lxml import html

import pkg_resources

import it4kt
from it4kt import build
from it4kt.model import Course, Page
from it4kt.filesystem import Node, ExternalPath
from it4kt.writers import (
    CopyWriter, LecturerCopyWriter, StylesWriter, TemplateWriter,
    relative, Theme
)

from .utils import (
    create_content_file,
    create_output_file,
    mock_filesystem_find,
    mock_root_filesystem
)


def test_copy_writer(tmp_course_dir):
    """CopyWriter should copy files to the output directory, even in
    subdirectories."""
    src_dir = Path('source')
    test_file = create_content_file(src_dir, 'test.txt')
    test_file_2 = create_content_file(src_dir, 'sub', 'test.txt')
    course_src_dir = mock_filesystem_find(src_dir)

    CopyWriter().write(Course("Testing course"), course_src_dir)

    output_dir = Path('output')
    assert (output_dir / test_file).exists()
    assert (output_dir / test_file_2).exists()


def test_copy_writer_removes_extra_files(tmp_course_dir):
    """CopyWriter should remove extra files from output directory."""
    test_dir = Path('test')
    create_content_file(test_dir)  # Test dir is empty
    extra_file = create_output_file('test', 'extra.txt')

    course_test_dir = mock_filesystem_find(test_dir)
    CopyWriter().write(Course("Testing course"), course_test_dir)
    assert not extra_file.exists()


def test_copy_writer_ignores_non_existing_source(tmp_course_dir):
    """CopyWriter should just pass is source does not exist."""
    non_existing = Path('non-existing')
    course_path = Node(non_existing)
    mock_root_filesystem()
    CopyWriter().write(Course("Testing course"), course_path)
    assert not Path('output', non_existing).exists()


def test_lecturer_copy_writer(default_configuration, tmp_course_dir):
    """LecturerCopyWriter should copy files in the lecturer mode."""
    test_file = create_content_file('source', 'test.txt')
    course_src_dir = mock_filesystem_find(test_file.parent)
    with build.lecturer_mode():
        LecturerCopyWriter().write(Course("Testing course"), course_src_dir)
    assert Path('output', 'lecturer', test_file).exists()


def test_lecturer_copy_writer_ignores_students_mode(default_configuration, tmp_course_dir):
    """LecturerCopyWriter should not copy files in the students mode."""
    test_file = create_content_file('source', 'test.txt')
    course_src_dir = mock_filesystem_find(test_file.parent)
    LecturerCopyWriter().write(Course("Testing course"), course_src_dir)
    assert not Path('output', test_file).exists()


def test_styles_writer(tmp_course_dir, default_theme):
    """Given default theme is chosen, StylesWriter should copy light.css
    from it."""
    theme_css_path = pkg_resources.resource_filename(
        'it4kt', 'themes/light/styles/light.css')
    output_css_path = os.path.join('output', 'styles', 'light.css')
    StylesWriter().write(Course("Testing course"), ExternalPath('styles'))
    assert filecmp.cmp(output_css_path, theme_css_path, shallow=False)


def test_styles_writer_removes_extra_files(tmp_course_dir, default_theme):
    """StylesWriter should remove extra files from output directory."""
    test_file = create_content_file('output', 'styles', 'test.txt')
    static_path = ExternalPath('styles')
    StylesWriter().write(Course("Testing course"), static_path)
    assert not test_file.exists()


def test_styles_writer_copies_common_files(tmp_course_dir, default_theme):
    """StylesWriter should copy common files regardless of selected theme."""
    common_js_path = pkg_resources.resource_filename(
        'it4kt', 'themes/common/styles/common.js')
    output_js_path = os.path.join('output', 'styles', 'common.js')
    static_path = ExternalPath('styles')
    StylesWriter().write(Course("Testing course"), static_path)
    assert filecmp.cmp(output_js_path, common_js_path, shallow=False)


def test_template_writer(tmp_course_dir, default_theme):
    """TemplateWriter should produce a HTML representation of the page."""
    course = Course("Testing course")
    course_path = Node(Path('test.xml'))
    page = Page(course_path.path)
    page.title = "Testing page"
    page.element_tree = html.fragment_fromstring(
        "<b>Content of testing page</b>")
    course.put_pages([page])
    TemplateWriter('page.html').write(course, course_path)
    assert Path('output', 'test.html').exists()
    assert page.content in Path('output', 'test.html').read_text()


def test_template_writer_ignores_missing_pages(default_theme):
    """TemplateWriter should exit correctly if requested page does not exist
    in the model."""
    course = Course("Testing course")
    TemplateWriter('page.html').write(course, Node(Path('test.xml')))
    assert not Path('output', 'test.html').exists()


def test_template_writer_uses_theme_path():
    """TemplateWriter should use templates path of selected theme"""
    it4kt.env.theme = Theme('it4kt', 'bootstrap')
    writer = TemplateWriter('page.html')
    template_filename = writer.templates.get_template(writer.name).filename
    expected_template_filename = pkg_resources.resource_filename(
        'it4kt', 'themes/bootstrap/templates/page.html')
    assert template_filename == expected_template_filename


def test_template_writer_allows_to_load_common_templates(default_theme):
    """TemplateWriter should use templates path of selected theme"""
    it4kt.env.config['theme']['name'] = 'bootstrap'
    writer = TemplateWriter('page.html')
    filename = writer.templates.get_template('common-headers.html').filename
    expected_filename = pkg_resources.resource_filename(
        'it4kt', 'themes/common/templates/common-headers.html')
    assert filename == expected_filename


def test_relative_filter():
    def page(*segments):
        return {'page': Page(Path(*segments))}

    assert relative(page('test', '01.xml'), "test/02.html") == "02.html"
    assert relative(page('test', '01.xml'), "test/files/test.png") == "files/test.png"
    assert relative(page('test', '01.xml'), "test/files/test.png") == "files/test.png"
    assert relative(page('test', '01.xml'), "info.html") == "../info.html"
    assert relative(page('index.xml'), "test/02.html") == "test/02.html"
