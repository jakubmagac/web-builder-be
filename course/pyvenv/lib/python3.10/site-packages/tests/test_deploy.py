from pathlib import Path
from unittest.mock import MagicMock

import pytest
import requests

import it4kt
from it4kt.deploy import Deployment, DeploymentError


def test_deployment(deployment_env, mocked_post):
    Deployment().run()
    assert_correct_request(mocked_post)


def test_deployment_with_lecturer_credentials(deployment_env, mocked_post):
    credentials = 'teacher:123'
    it4kt.env.config['deploy']['lecturer-credentials'] = credentials
    Deployment().run()
    assert_correct_request(mocked_post, lecturer_credentials=credentials)


def test_missing_token(deployment_env, mocked_post, monkeypatch):
    monkeypatch.delenv('DEPLOY_TOKEN')
    with pytest.raises(DeploymentError):
        Deployment().run()
    assert mocked_post.call_count == 0


def test_missing_course_code(deployment_env, mocked_post):
    del it4kt.env.config['deploy']['code']
    with pytest.raises(DeploymentError):
        Deployment().run()
    assert mocked_post.call_count == 0


def test_missing_output_directory(deployment_env, mocked_post):
    Path('output').rmdir()
    with pytest.raises(DeploymentError):
        Deployment().run()
    assert mocked_post.call_count == 0


@pytest.fixture
def deployment_env(testing_course, monkeypatch):
    output = Path('output')
    output.mkdir()
    monkeypatch.setenv('DEPLOY_TOKEN', 'secret_token')
    yield
    if output.exists():
        output.rmdir()


@pytest.fixture
def mocked_post(monkeypatch):
    def side_effect(*args, **kwargs):
        if 'files' in kwargs:
            for file in kwargs['files'].values():
                file.close()
        response = requests.Response()
        response.status_code = requests.codes.ok
        return response
    mocked_post = MagicMock(side_effect=side_effect)
    monkeypatch.setattr(requests, 'post', mocked_post)
    return mocked_post


def assert_correct_request(mocked_post, lecturer_credentials=None):
    assert mocked_post.call_count == 1
    args, kwargs = mocked_post.call_args
    assert args[0] == 'https://kurzy.kpi.fei.tuke.sk/uploads/example'
    assert kwargs['headers'] == {'Authorization': 'Token secret_token'}
    if lecturer_credentials:
        assert kwargs['data'] == {'protected-paths': '{"lecturer": "' + lecturer_credentials + '"}'}
    else:
        assert kwargs['data'] == {}
    assert 'package' in kwargs['files']
