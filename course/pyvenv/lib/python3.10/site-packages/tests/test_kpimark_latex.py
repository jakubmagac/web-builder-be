from pathlib import Path

from lxml import html

import it4kt
from it4kt.kpimark import Kpimark
from it4kt.latex import HtmlToLatex
from it4kt.readers import KpimarkReader
from .utils import filesystem_find


def test_basic_markdown(example_course):
    text = '''Some paragraph with *emphasis* and **bold**.

- A list
- Unordered one
'''
    expected_output = r'''Some paragraph with \textit{emphasis} and \textbf{bold}.

\begin{itemize}
  \item A list
  \item Unordered one
\end{itemize}

'''
    course_path = filesystem_find(Path('labs', 'reference.md'))
    output = Kpimark('scenario', None).render_html(text, course_path)
    output = HtmlToLatex(html.fragment_fromstring(output)).convert()
    assert output == expected_output


def test_reference_document(example_course):
    course_path = filesystem_find(Path("labs", "reference.md"))
    it4kt.env.lecturer_mode = True
    page = KpimarkReader('scenario', validation=None).read(course_path)
    output = HtmlToLatex(page.element_tree).convert()
    expected_output = Path('..', 'tests', 'reference.tex').read_text(encoding='utf-8')
    assert output == expected_output


def test_render_code_block(testing_course):
    course_path = filesystem_find(Path("labs", "test.md"))
    search_for = ('\\begin{minted}[breaklines]{python}'
                  '\nprint("test")'
                  '\n\n\\end{minted}')

    page = KpimarkReader('scenario').read(course_path)
    output = HtmlToLatex(page.element_tree).convert()

    assert search_for in output


def test_render_nested_code_block(testing_course):
    course_path = filesystem_find(Path("labs", "test_admonitions.md"))
    search_for = ('\\begin{minted}[breaklines]{python}'
                  '\nif 5 > 4:'
                  '\n    print(self.testing_field)'
                  '\n    return self.test'
                  '\n\n\\end{minted}')

    page = KpimarkReader('scenario').read(course_path)
    output = HtmlToLatex(page.element_tree).convert()

    assert search_for in output


def test_render_common_admonition(testing_course):
    course_path = filesystem_find(Path("labs", "test.md"))
    search_for = (
        '\\begin{wrongExample}{Nesprávny príklad: }'
        '\nVestibulum nec imperdiet magna. Vivamus pharetra metus sed odio tempor.'
        '\n\n\\end{wrongExample}'
    )

    page = KpimarkReader('scenario').read(course_path)
    output = HtmlToLatex(page.element_tree).convert()
    assert search_for in output


def test_render_task(testing_course):
    course_path = filesystem_find(Path("labs", "test.md"))
    search_for = (
        '\\begin{task}{Úloha 2.2: }'
        '\nNullam id condimentum dui, eget tempor ex. '
        'In molestie diam a lorem rutrum dapibus. '
        'Cras lobortis libero et libero consectetur consectetur. '
        'Phasellus at leo et mauris placerat sagittis.'
        '\n\n\\end{task}'
    )

    page = KpimarkReader('scenario').read(course_path)
    output = HtmlToLatex(page.element_tree).convert()

    assert search_for in output


def test_render_instructions(testing_course):
    course_path = filesystem_find(Path("labs", "01.md"))
    search_for = (
        '\\subsection*{Postup}'
    )

    page = KpimarkReader('scenario').read(course_path)
    output = HtmlToLatex(page.element_tree).convert()

    assert search_for in output


def test_render_step(testing_course):
    course_path = filesystem_find(Path("labs", "01.md"))
    search_for = '\\step{Krok 1}'

    page = KpimarkReader('scenario').read(course_path)
    output = HtmlToLatex(page.element_tree).convert()

    assert search_for in output
