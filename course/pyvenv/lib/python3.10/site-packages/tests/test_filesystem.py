from pathlib import Path
from it4kt.filesystem import Node, ExternalPath, FileSystem
from .utils import create_content_file, filesystem_find
import it4kt


def test_find_file(testing_course):
    test_document_md = Path("labs", "01.md")
    course_path_md = filesystem_find(test_document_md)
    assert isinstance(course_path_md, Node)
    assert course_path_md.content_path is not None
    assert course_path_md.output_path is not None

    test_document_xml = Path("labs", "02.xml")
    course_path_xml = filesystem_find(test_document_xml)
    assert isinstance(course_path_xml, Node)


def test_find_asset(testing_course):
    test_asset = Path("labs", "images", "test.png")
    course_path = filesystem_find(test_asset)
    assert isinstance(course_path, Node)


def test_non_existing_file(testing_course):
    test_document = Path("labs", "non_existing.md")
    assert it4kt.env.fs.find(test_document) is None


def test_find_dir(testing_course):
    test_dir = Path("labs")
    course_dir = filesystem_find(test_dir)
    assert course_dir.is_dir()


def test_not_find_dir(testing_course):
    test_dir = Path("non-existing-dir")
    assert it4kt.env.fs.find(test_dir) is None


def test_find_external(tmp_course_dir):
    it4kt.env.fs = FileSystem(Path("."), ['styles'])
    external_path = filesystem_find(Path('styles'))
    assert isinstance(external_path, ExternalPath)
    # external paths doesn't normally have content_path
    # because their paths are not resolved by filesystem
    assert external_path.content_path is None


def test_fs_copy(tmp_course_dir):
    create_content_file(Path("copy", "file-to-copy"))
    create_content_file(Path("copy", "file-to-copy2"))
    it4kt.env.fs = FileSystem(Path("."))
    course_dir = filesystem_find(Path('copy'))
    course_file_1 = filesystem_find(Path('copy', "file-to-copy"))
    course_file_2 = filesystem_find(Path('copy', "file-to-copy2"))

    assert course_dir.is_dir()
    assert course_file_1.is_file()
    assert course_file_2.is_file()
    it4kt.env.fs.copy(course_dir)

    assert course_file_1.output_path.exists()
    assert course_file_2.output_path.exists()


def test_fs_copy_non_existing(tmp_course_dir):
    # This test demonstrates situation when file which is not located in filesystem
    # virtual memory is trying to get copied to output directory
    course_bad_path = Node(Path("non-existing"))
    # if user wants to include external files, which are not located in content dir
    # to conversion he should use *ExternalPath* instead of CoursePath or CourseDir
    it4kt.env.fs = FileSystem(Path("."))

    # builder should not crash when non existing file is trying to be copied
    # only logger warning will be fired
    assert it4kt.env.fs.copy(course_bad_path) is None
    assert not course_bad_path.output_path.exists()
